CCS PCM C Compiler, Version 5.049, 5967               27-ﬂ«‰Ê‰†«·√Ê·-22 20:31

               Filename:   C:\Users\safa\Documents\testat\ammar.lst

               ROM used:   3755 words (46%)
                           Largest free fragment is 2048
               RAM used:   40 (11%) at main() level
                           101 (27%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0A
0001:  MOVWF  0A
0002:  GOTO   2FB
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... #define lcd_rs_pin pin_c0 
.................... #define lcd_rw_pin pin_c6 
.................... #define lcd_enable_pin pin_c1 
.................... #define lcd_data4 pin_c2 
.................... #define lcd_data5 pin_c3 
.................... #define lcd_data6 pin_c4 
.................... #define lcd_data7 pin_c5 
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0060:  DATA D2,37
0061:  DATA EF,36
0062:  DATA 31,1D
0063:  DATA A5,19
0064:  DATA EC,3A
0065:  DATA A0,12
0066:  DATA E3,21
0067:  DATA 00,00
0068:  DATA D2,37
0069:  DATA EF,36
006A:  DATA 31,1D
006B:  DATA 25,19
006C:  DATA EC,3A
006D:  DATA A0,12
006E:  DATA E3,21
006F:  DATA 00,01
0070:  DATA D2,37
0071:  DATA EF,36
0072:  DATA 31,1D
0073:  DATA 25,19
0074:  DATA EC,3A
0075:  DATA A0,12
0076:  DATA E3,21
0077:  DATA 00,01
0078:  DATA D2,37
0079:  DATA EF,36
007A:  DATA 31,1D
007B:  DATA 25,19
007C:  DATA EC,3A
007D:  DATA A0,12
007E:  DATA E3,21
007F:  DATA 00,01
0080:  DATA 69,3A
0081:  DATA A7,39
0082:  DATA A0,31
0083:  DATA 6F,36
0084:  DATA 64,00
0085:  DATA 69,3A
0086:  DATA A7,39
0087:  DATA 20,37
0088:  DATA 6F,39
0089:  DATA ED,30
008A:  DATA 6C,00
008B:  DATA 69,3A
008C:  DATA A7,39
008D:  DATA 20,34
008E:  DATA 6F,3A
008F:  DATA 00,00
0090:  DATA D2,37
0091:  DATA EF,36
0092:  DATA 31,1D
0093:  DATA 20,00
0094:  DATA D2,37
0095:  DATA EF,36
0096:  DATA 32,1D
0097:  DATA 20,00
0098:  DATA D2,37
0099:  DATA EF,36
009A:  DATA 33,1D
009B:  DATA 20,00
009C:  DATA D2,37
009D:  DATA EF,36
009E:  DATA 34,1D
009F:  DATA 20,00
00A0:  DATA 52,24
00A1:  DATA 20,10
00A2:  DATA 20,1D
00A3:  DATA A0,12
00A4:  DATA 33,17
00A5:  DATA 31,33
00A6:  DATA A0,12
00A7:  DATA 25,10
00A8:  DATA 20,10
00A9:  DATA 80,27
00AA:  DATA 69,3A
00AB:  DATA A7,39
00AC:  DATA 20,36
00AD:  DATA EF,3B
00AE:  DATA 80,2A
00AF:  DATA C4,30
00B0:  DATA F2,35
00B1:  DATA 00,01
00B2:  DATA D3,3A
00B3:  DATA 6E,37
00B4:  DATA 79,00
00B5:  DATA 6F,38
00B6:  DATA E1,31
00B7:  DATA 69,3A
00B8:  DATA 79,10
00B9:  DATA BA,12
00BA:  DATA 33,17
00BB:  DATA 31,33
00BC:  DATA 20,10
00BD:  DATA A5,12
00BE:  DATA 00,00
*
02DB:  MOVF   0B,W
02DC:  MOVWF  3F
02DD:  BCF    0B.7
02DE:  BSF    03.5
02DF:  BSF    03.6
02E0:  BSF    0C.7
02E1:  BSF    0C.0
02E2:  NOP
02E3:  NOP
02E4:  BCF    03.5
02E5:  BCF    03.6
02E6:  BTFSC  3F.7
02E7:  BSF    0B.7
02E8:  BSF    03.6
02E9:  MOVF   0C,W
02EA:  ANDLW  7F
02EB:  BTFSC  03.2
02EC:  GOTO   32F
02ED:  BCF    03.6
02EE:  MOVWF  3F
02EF:  BSF    03.6
02F0:  MOVF   0D,W
02F1:  BCF    03.6
02F2:  MOVWF  40
02F3:  BSF    03.6
02F4:  MOVF   0F,W
02F5:  BCF    03.6
02F6:  MOVWF  41
02F7:  MOVF   3F,W
02F8:  MOVWF  4C
02F9:  CALL   2AF
02FA:  MOVF   40,W
02FB:  BSF    03.6
02FC:  MOVWF  0D
02FD:  BCF    03.6
02FE:  MOVF   41,W
02FF:  BSF    03.6
0300:  MOVWF  0F
0301:  BCF    03.6
0302:  MOVF   0B,W
0303:  MOVWF  42
0304:  BCF    0B.7
0305:  BSF    03.5
0306:  BSF    03.6
0307:  BSF    0C.7
0308:  BSF    0C.0
0309:  NOP
030A:  NOP
030B:  BCF    03.5
030C:  BCF    03.6
030D:  BTFSC  42.7
030E:  BSF    0B.7
030F:  BSF    03.6
0310:  RLF    0C,W
0311:  RLF    0E,W
0312:  ANDLW  7F
0313:  BTFSC  03.2
0314:  GOTO   32F
0315:  BCF    03.6
0316:  MOVWF  3F
0317:  BSF    03.6
0318:  MOVF   0D,W
0319:  BCF    03.6
031A:  MOVWF  40
031B:  BSF    03.6
031C:  MOVF   0F,W
031D:  BCF    03.6
031E:  MOVWF  41
031F:  MOVF   3F,W
0320:  MOVWF  4C
0321:  CALL   2AF
0322:  MOVF   40,W
0323:  BSF    03.6
0324:  MOVWF  0D
0325:  BCF    03.6
0326:  MOVF   41,W
0327:  BSF    03.6
0328:  MOVWF  0F
0329:  INCF   0D,F
032A:  BTFSC  03.2
032B:  INCF   0F,F
032C:  BCF    03.6
032D:  GOTO   2DB
032E:  BSF    03.6
032F:  BCF    03.6
0330:  RETURN
*
0393:  MOVF   0B,W
0394:  MOVWF  40
0395:  BCF    0B.7
0396:  BSF    03.5
0397:  BSF    03.6
0398:  BSF    0C.7
0399:  BSF    0C.0
039A:  NOP
039B:  NOP
039C:  BCF    03.5
039D:  BCF    03.6
039E:  BTFSC  40.7
039F:  BSF    0B.7
03A0:  BTFSC  03.0
03A1:  GOTO   3CA
03A2:  BSF    03.6
03A3:  MOVF   0C,W
03A4:  ANDLW  7F
03A5:  BCF    03.6
03A6:  MOVWF  40
03A7:  BSF    03.6
03A8:  MOVF   0D,W
03A9:  BCF    03.6
03AA:  MOVWF  41
03AB:  BSF    03.6
03AC:  MOVF   0F,W
03AD:  BCF    03.6
03AE:  MOVWF  42
03AF:  MOVF   40,W
03B0:  MOVWF  4C
03B1:  CALL   2AF
03B2:  MOVF   41,W
03B3:  BSF    03.6
03B4:  MOVWF  0D
03B5:  BCF    03.6
03B6:  MOVF   42,W
03B7:  BSF    03.6
03B8:  MOVWF  0F
03B9:  BCF    03.6
03BA:  MOVF   0B,W
03BB:  MOVWF  43
03BC:  BCF    0B.7
03BD:  BSF    03.5
03BE:  BSF    03.6
03BF:  BSF    0C.7
03C0:  BSF    0C.0
03C1:  NOP
03C2:  NOP
03C3:  BCF    03.5
03C4:  BCF    03.6
03C5:  BTFSC  43.7
03C6:  BSF    0B.7
03C7:  DECFSZ 3F,F
03C8:  GOTO   3CA
03C9:  GOTO   3E9
03CA:  BSF    03.6
03CB:  RLF    0C,W
03CC:  RLF    0E,W
03CD:  ANDLW  7F
03CE:  BCF    03.6
03CF:  MOVWF  40
03D0:  BSF    03.6
03D1:  MOVF   0D,W
03D2:  BCF    03.6
03D3:  MOVWF  41
03D4:  BSF    03.6
03D5:  MOVF   0F,W
03D6:  BCF    03.6
03D7:  MOVWF  42
03D8:  MOVF   40,W
03D9:  MOVWF  4C
03DA:  CALL   2AF
03DB:  MOVF   41,W
03DC:  BSF    03.6
03DD:  MOVWF  0D
03DE:  BCF    03.6
03DF:  MOVF   42,W
03E0:  BSF    03.6
03E1:  MOVWF  0F
03E2:  INCF   0D,F
03E3:  BTFSC  03.2
03E4:  INCF   0F,F
03E5:  BCF    03.0
03E6:  BCF    03.6
03E7:  DECFSZ 3F,F
03E8:  GOTO   393
03E9:  RETURN
03EA:  CLRF   47
03EB:  MOVF   04,W
03EC:  MOVWF  46
03ED:  BCF    47.0
03EE:  BTFSC  03.7
03EF:  BSF    47.0
03F0:  SWAPF  40,W
03F1:  IORLW  F0
03F2:  MOVWF  42
03F3:  ADDWF  42,F
03F4:  ADDLW  E2
03F5:  MOVWF  43
03F6:  ADDLW  32
03F7:  MOVWF  45
03F8:  MOVF   40,W
03F9:  ANDLW  0F
03FA:  ADDWF  43,F
03FB:  ADDWF  43,F
03FC:  ADDWF  45,F
03FD:  ADDLW  E9
03FE:  MOVWF  44
03FF:  ADDWF  44,F
0400:  ADDWF  44,F
0401:  SWAPF  3F,W
0402:  ANDLW  0F
0403:  ADDWF  44,F
0404:  ADDWF  45,F
0405:  RLF    44,F
0406:  RLF    45,F
0407:  COMF   45,F
0408:  RLF    45,F
0409:  MOVF   3F,W
040A:  ANDLW  0F
040B:  ADDWF  45,F
040C:  RLF    42,F
040D:  MOVLW  07
040E:  MOVWF  41
040F:  MOVLW  0A
0410:  ADDWF  45,F
0411:  DECF   44,F
0412:  BTFSS  03.0
0413:  GOTO   410
0414:  ADDWF  44,F
0415:  DECF   43,F
0416:  BTFSS  03.0
0417:  GOTO   414
0418:  ADDWF  43,F
0419:  DECF   42,F
041A:  BTFSS  03.0
041B:  GOTO   418
041C:  ADDWF  42,F
041D:  DECF   41,F
041E:  BTFSS  03.0
041F:  GOTO   41C
0420:  MOVLW  41
0421:  MOVWF  04
0422:  BCF    03.7
0423:  MOVLW  07
0424:  ANDWF  46,W
0425:  BCF    46.6
0426:  ADDWF  04,F
0427:  MOVLW  45
0428:  SUBWF  04,W
0429:  BTFSC  03.2
042A:  BSF    46.6
042B:  MOVF   00,W
042C:  MOVWF  77
042D:  BTFSS  03.2
042E:  GOTO   437
042F:  BTFSC  46.6
0430:  GOTO   437
0431:  BTFSC  46.4
0432:  GOTO   449
0433:  BTFSC  46.3
0434:  GOTO   437
0435:  MOVLW  20
0436:  GOTO   43A
0437:  BSF    46.3
0438:  BCF    46.4
0439:  MOVLW  30
043A:  ADDWF  77,F
043B:  CLRF   40
043C:  MOVF   04,W
043D:  MOVWF  3F
043E:  BCF    40.0
043F:  BTFSC  03.7
0440:  BSF    40.0
0441:  MOVF   77,W
0442:  MOVWF  4C
0443:  CALL   2AF
0444:  MOVF   3F,W
0445:  MOVWF  04
0446:  BCF    03.7
0447:  BTFSC  40.0
0448:  BSF    03.7
0449:  INCF   04,F
044A:  BTFSS  46.6
044B:  GOTO   427
044C:  RETURN
*
065E:  MOVLW  8E
065F:  MOVWF  77
0660:  MOVF   64,W
0661:  MOVWF  78
0662:  MOVF   63,W
0663:  MOVWF  79
0664:  CLRF   7A
0665:  MOVF   78,F
0666:  BTFSS  03.2
0667:  GOTO   672
0668:  MOVF   79,W
0669:  MOVWF  78
066A:  CLRF   79
066B:  MOVLW  08
066C:  SUBWF  77,F
066D:  MOVF   78,F
066E:  BTFSS  03.2
066F:  GOTO   672
0670:  CLRF   77
0671:  GOTO   67A
0672:  BCF    03.0
0673:  BTFSC  78.7
0674:  GOTO   679
0675:  RLF    79,F
0676:  RLF    78,F
0677:  DECF   77,F
0678:  GOTO   672
0679:  BCF    78.7
067A:  RETURN
067B:  MOVF   6B,W
067C:  BTFSC  03.2
067D:  GOTO   707
067E:  BSF    03.5
067F:  MOVWF  20
0680:  BCF    03.5
0681:  MOVF   6F,W
0682:  BTFSC  03.2
0683:  GOTO   707
0684:  BSF    03.5
0685:  ADDWF  20,F
0686:  BTFSC  03.0
0687:  GOTO   693
0688:  MOVLW  7F
0689:  SUBWF  20,F
068A:  BTFSC  03.0
068B:  GOTO   68E
068C:  BCF    03.5
068D:  GOTO   707
068E:  BTFSS  03.2
068F:  GOTO   692
0690:  BCF    03.5
0691:  GOTO   707
0692:  GOTO   699
0693:  MOVLW  81
0694:  ADDWF  20,F
0695:  BTFSS  03.0
0696:  GOTO   699
0697:  BCF    03.5
0698:  GOTO   707
0699:  MOVF   20,W
069A:  MOVWF  77
069B:  CLRF   78
069C:  CLRF   79
069D:  CLRF   7A
069E:  BCF    03.5
069F:  MOVF   6C,W
06A0:  BSF    03.5
06A1:  MOVWF  24
06A2:  BSF    24.7
06A3:  BCF    03.5
06A4:  MOVF   6D,W
06A5:  BSF    03.5
06A6:  MOVWF  23
06A7:  BCF    03.5
06A8:  MOVF   6E,W
06A9:  BSF    03.5
06AA:  MOVWF  22
06AB:  MOVLW  18
06AC:  MOVWF  20
06AD:  CLRF   21
06AE:  BTFSS  22.0
06AF:  GOTO   6CD
06B0:  MOVF   72,W
06B1:  ADDWF  7A,F
06B2:  BTFSS  03.0
06B3:  GOTO   6BA
06B4:  INCF   79,F
06B5:  BTFSS  03.2
06B6:  GOTO   6BA
06B7:  INCF   78,F
06B8:  BTFSC  03.2
06B9:  BSF    21.7
06BA:  MOVF   71,W
06BB:  ADDWF  79,F
06BC:  BTFSS  03.0
06BD:  GOTO   6C1
06BE:  INCF   78,F
06BF:  BTFSC  03.2
06C0:  BSF    21.7
06C1:  MOVF   70,W
06C2:  BCF    03.5
06C3:  MOVWF  6D
06C4:  BSF    6D.7
06C5:  MOVF   6D,W
06C6:  ADDWF  78,F
06C7:  BTFSS  03.0
06C8:  GOTO   6CC
06C9:  BSF    03.5
06CA:  BSF    21.7
06CB:  BCF    03.5
06CC:  BSF    03.5
06CD:  RLF    21,F
06CE:  RRF    78,F
06CF:  RRF    79,F
06D0:  RRF    7A,F
06D1:  RRF    24,F
06D2:  RRF    23,F
06D3:  RRF    22,F
06D4:  BCF    03.0
06D5:  DECFSZ 20,F
06D6:  GOTO   6AD
06D7:  MOVLW  01
06D8:  ADDWF  77,F
06D9:  BTFSS  03.0
06DA:  GOTO   6DD
06DB:  BCF    03.5
06DC:  GOTO   707
06DD:  BTFSC  78.7
06DE:  GOTO   6E7
06DF:  RLF    24,F
06E0:  RLF    7A,F
06E1:  RLF    79,F
06E2:  RLF    78,F
06E3:  DECFSZ 77,F
06E4:  GOTO   6E7
06E5:  BCF    03.5
06E6:  GOTO   707
06E7:  BTFSS  24.7
06E8:  GOTO   6FA
06E9:  INCF   7A,F
06EA:  BTFSS  03.2
06EB:  GOTO   6FA
06EC:  INCF   79,F
06ED:  BTFSS  03.2
06EE:  GOTO   6FA
06EF:  INCF   78,F
06F0:  BTFSS  03.2
06F1:  GOTO   6FA
06F2:  RRF    78,F
06F3:  RRF    79,F
06F4:  RRF    7A,F
06F5:  INCF   77,F
06F6:  BTFSS  03.2
06F7:  GOTO   6FA
06F8:  BCF    03.5
06F9:  GOTO   707
06FA:  BCF    03.5
06FB:  MOVF   6C,W
06FC:  BSF    03.5
06FD:  MOVWF  21
06FE:  MOVF   70,W
06FF:  XORWF  21,F
0700:  BTFSS  21.7
0701:  GOTO   704
0702:  BSF    78.7
0703:  GOTO   70C
0704:  BCF    78.7
0705:  GOTO   70C
0706:  BCF    03.5
0707:  CLRF   77
0708:  CLRF   78
0709:  CLRF   79
070A:  CLRF   7A
070B:  BSF    03.5
070C:  BCF    03.5
070D:  RETURN
070E:  MOVF   40,W
070F:  MOVWF  47
0710:  MOVF   44,W
0711:  XORWF  47,F
0712:  BTFSS  47.7
0713:  GOTO   719
0714:  BCF    03.2
0715:  BCF    03.0
0716:  BTFSC  40.7
0717:  BSF    03.0
0718:  GOTO   74C
0719:  MOVF   40,W
071A:  MOVWF  47
071B:  MOVF   43,W
071C:  MOVWF  48
071D:  MOVF   3F,W
071E:  SUBWF  48,F
071F:  BTFSC  03.2
0720:  GOTO   727
0721:  BTFSS  47.7
0722:  GOTO   74C
0723:  MOVF   03,W
0724:  XORLW  01
0725:  MOVWF  03
0726:  GOTO   74C
0727:  MOVF   44,W
0728:  MOVWF  48
0729:  MOVF   40,W
072A:  SUBWF  48,F
072B:  BTFSC  03.2
072C:  GOTO   733
072D:  BTFSS  47.7
072E:  GOTO   74C
072F:  MOVF   03,W
0730:  XORLW  01
0731:  MOVWF  03
0732:  GOTO   74C
0733:  MOVF   45,W
0734:  MOVWF  48
0735:  MOVF   41,W
0736:  SUBWF  48,F
0737:  BTFSC  03.2
0738:  GOTO   73F
0739:  BTFSS  47.7
073A:  GOTO   74C
073B:  MOVF   03,W
073C:  XORLW  01
073D:  MOVWF  03
073E:  GOTO   74C
073F:  MOVF   46,W
0740:  MOVWF  48
0741:  MOVF   42,W
0742:  SUBWF  48,F
0743:  BTFSC  03.2
0744:  GOTO   74B
0745:  BTFSS  47.7
0746:  GOTO   74C
0747:  MOVF   03,W
0748:  XORLW  01
0749:  MOVWF  03
074A:  GOTO   74C
074B:  BCF    03.0
074C:  RETURN
074D:  BTFSC  03.1
074E:  GOTO   752
074F:  MOVLW  54
0750:  MOVWF  04
0751:  BCF    03.7
0752:  CLRF   77
0753:  CLRF   78
0754:  CLRF   79
0755:  CLRF   7A
0756:  CLRF   54
0757:  CLRF   55
0758:  CLRF   56
0759:  CLRF   57
075A:  MOVF   53,W
075B:  IORWF  52,W
075C:  IORWF  51,W
075D:  IORWF  50,W
075E:  BTFSC  03.2
075F:  GOTO   790
0760:  MOVLW  20
0761:  MOVWF  58
0762:  BCF    03.0
0763:  RLF    4C,F
0764:  RLF    4D,F
0765:  RLF    4E,F
0766:  RLF    4F,F
0767:  RLF    54,F
0768:  RLF    55,F
0769:  RLF    56,F
076A:  RLF    57,F
076B:  MOVF   53,W
076C:  SUBWF  57,W
076D:  BTFSS  03.2
076E:  GOTO   779
076F:  MOVF   52,W
0770:  SUBWF  56,W
0771:  BTFSS  03.2
0772:  GOTO   779
0773:  MOVF   51,W
0774:  SUBWF  55,W
0775:  BTFSS  03.2
0776:  GOTO   779
0777:  MOVF   50,W
0778:  SUBWF  54,W
0779:  BTFSS  03.0
077A:  GOTO   78A
077B:  MOVF   50,W
077C:  SUBWF  54,F
077D:  MOVF   51,W
077E:  BTFSS  03.0
077F:  INCFSZ 51,W
0780:  SUBWF  55,F
0781:  MOVF   52,W
0782:  BTFSS  03.0
0783:  INCFSZ 52,W
0784:  SUBWF  56,F
0785:  MOVF   53,W
0786:  BTFSS  03.0
0787:  INCFSZ 53,W
0788:  SUBWF  57,F
0789:  BSF    03.0
078A:  RLF    77,F
078B:  RLF    78,F
078C:  RLF    79,F
078D:  RLF    7A,F
078E:  DECFSZ 58,F
078F:  GOTO   762
0790:  MOVF   54,W
0791:  MOVWF  00
0792:  INCF   04,F
0793:  MOVF   55,W
0794:  MOVWF  00
0795:  INCF   04,F
0796:  MOVF   56,W
0797:  MOVWF  00
0798:  INCF   04,F
0799:  MOVF   57,W
079A:  MOVWF  00
079B:  RETURN
*
0800:  MOVLW  80
0801:  BTFSC  03.1
0802:  XORWF  6C,F
0803:  CLRF   71
0804:  CLRF   72
0805:  MOVF   68,W
0806:  MOVWF  70
0807:  MOVF   6C,W
0808:  XORWF  70,F
0809:  MOVF   67,W
080A:  BTFSC  03.2
080B:  GOTO   0F0
080C:  MOVWF  6F
080D:  MOVWF  77
080E:  MOVF   6B,W
080F:  BTFSC  03.2
0810:  GOTO   0F9
0811:  SUBWF  6F,F
0812:  BTFSC  03.2
0813:  GOTO   095
0814:  BTFSS  03.0
0815:  GOTO   053
0816:  MOVF   6C,W
0817:  MOVWF  75
0818:  BSF    75.7
0819:  MOVF   6D,W
081A:  MOVWF  74
081B:  MOVF   6E,W
081C:  MOVWF  73
081D:  CLRF   72
081E:  BCF    03.0
081F:  RRF    75,F
0820:  RRF    74,F
0821:  RRF    73,F
0822:  RRF    72,F
0823:  DECFSZ 6F,F
0824:  GOTO   01D
0825:  BTFSS  70.7
0826:  GOTO   02A
0827:  BSF    71.0
0828:  GOTO   10D
0829:  BCF    71.0
082A:  BCF    6F.0
082B:  BSF    71.4
082C:  MOVLW  6A
082D:  MOVWF  04
082E:  BCF    03.7
082F:  GOTO   122
0830:  BCF    71.4
0831:  BTFSC  70.7
0832:  GOTO   03D
0833:  BTFSS  6F.0
0834:  GOTO   048
0835:  RRF    75,F
0836:  RRF    74,F
0837:  RRF    73,F
0838:  RRF    72,F
0839:  INCF   77,F
083A:  BTFSC  03.2
083B:  GOTO   108
083C:  GOTO   048
083D:  BTFSC  75.7
083E:  GOTO   04B
083F:  BCF    03.0
0840:  RLF    72,F
0841:  RLF    73,F
0842:  RLF    74,F
0843:  RLF    75,F
0844:  DECF   77,F
0845:  BTFSC  03.2
0846:  GOTO   108
0847:  GOTO   03D
0848:  BSF    71.6
0849:  GOTO   0B5
084A:  BCF    71.6
084B:  MOVF   68,W
084C:  MOVWF  70
084D:  BTFSS  70.7
084E:  GOTO   051
084F:  BSF    75.7
0850:  GOTO   101
0851:  BCF    75.7
0852:  GOTO   101
0853:  MOVF   6B,W
0854:  MOVWF  6F
0855:  MOVWF  77
0856:  MOVF   67,W
0857:  SUBWF  6F,F
0858:  MOVF   68,W
0859:  MOVWF  75
085A:  BSF    75.7
085B:  MOVF   69,W
085C:  MOVWF  74
085D:  MOVF   6A,W
085E:  MOVWF  73
085F:  CLRF   72
0860:  BCF    03.0
0861:  RRF    75,F
0862:  RRF    74,F
0863:  RRF    73,F
0864:  RRF    72,F
0865:  DECFSZ 6F,F
0866:  GOTO   05F
0867:  BTFSS  70.7
0868:  GOTO   06C
0869:  BSF    71.1
086A:  GOTO   10D
086B:  BCF    71.1
086C:  BCF    6F.0
086D:  BSF    71.5
086E:  MOVLW  6E
086F:  MOVWF  04
0870:  BCF    03.7
0871:  GOTO   122
0872:  BCF    71.5
0873:  BTFSC  70.7
0874:  GOTO   07F
0875:  BTFSS  6F.0
0876:  GOTO   08A
0877:  RRF    75,F
0878:  RRF    74,F
0879:  RRF    73,F
087A:  RRF    72,F
087B:  INCF   77,F
087C:  BTFSC  03.2
087D:  GOTO   108
087E:  GOTO   08A
087F:  BTFSC  75.7
0880:  GOTO   08D
0881:  BCF    03.0
0882:  RLF    72,F
0883:  RLF    73,F
0884:  RLF    74,F
0885:  RLF    75,F
0886:  DECF   77,F
0887:  BTFSC  03.2
0888:  GOTO   108
0889:  GOTO   07F
088A:  BSF    71.7
088B:  GOTO   0B5
088C:  BCF    71.7
088D:  MOVF   6C,W
088E:  MOVWF  70
088F:  BTFSS  70.7
0890:  GOTO   093
0891:  BSF    75.7
0892:  GOTO   101
0893:  BCF    75.7
0894:  GOTO   101
0895:  MOVF   6C,W
0896:  MOVWF  75
0897:  BSF    75.7
0898:  MOVF   6D,W
0899:  MOVWF  74
089A:  MOVF   6E,W
089B:  MOVWF  73
089C:  BTFSS  70.7
089D:  GOTO   0A2
089E:  BCF    75.7
089F:  BSF    71.2
08A0:  GOTO   10D
08A1:  BCF    71.2
08A2:  CLRF   72
08A3:  BCF    6F.0
08A4:  MOVLW  6A
08A5:  MOVWF  04
08A6:  BCF    03.7
08A7:  GOTO   122
08A8:  BTFSC  70.7
08A9:  GOTO   0CB
08AA:  MOVF   68,W
08AB:  MOVWF  70
08AC:  BTFSS  6F.0
08AD:  GOTO   0B5
08AE:  RRF    75,F
08AF:  RRF    74,F
08B0:  RRF    73,F
08B1:  RRF    72,F
08B2:  INCF   77,F
08B3:  BTFSC  03.2
08B4:  GOTO   108
08B5:  BTFSS  72.7
08B6:  GOTO   0C6
08B7:  INCF   73,F
08B8:  BTFSS  03.2
08B9:  GOTO   0C6
08BA:  INCF   74,F
08BB:  BTFSS  03.2
08BC:  GOTO   0C6
08BD:  INCF   75,F
08BE:  BTFSS  03.2
08BF:  GOTO   0C6
08C0:  RRF    75,F
08C1:  RRF    74,F
08C2:  RRF    73,F
08C3:  INCF   77,F
08C4:  BTFSC  03.2
08C5:  GOTO   108
08C6:  BTFSC  71.6
08C7:  GOTO   04A
08C8:  BTFSC  71.7
08C9:  GOTO   08C
08CA:  GOTO   0EA
08CB:  MOVLW  80
08CC:  XORWF  75,F
08CD:  BTFSS  75.7
08CE:  GOTO   0D3
08CF:  GOTO   10D
08D0:  MOVF   6C,W
08D1:  MOVWF  70
08D2:  GOTO   0E0
08D3:  MOVF   68,W
08D4:  MOVWF  70
08D5:  MOVF   75,F
08D6:  BTFSS  03.2
08D7:  GOTO   0E0
08D8:  MOVF   74,F
08D9:  BTFSS  03.2
08DA:  GOTO   0E0
08DB:  MOVF   73,F
08DC:  BTFSS  03.2
08DD:  GOTO   0E0
08DE:  CLRF   77
08DF:  GOTO   101
08E0:  BTFSC  75.7
08E1:  GOTO   0EA
08E2:  BCF    03.0
08E3:  RLF    72,F
08E4:  RLF    73,F
08E5:  RLF    74,F
08E6:  RLF    75,F
08E7:  DECFSZ 77,F
08E8:  GOTO   0E0
08E9:  GOTO   108
08EA:  BTFSS  70.7
08EB:  GOTO   0EE
08EC:  BSF    75.7
08ED:  GOTO   101
08EE:  BCF    75.7
08EF:  GOTO   101
08F0:  MOVF   6B,W
08F1:  MOVWF  77
08F2:  MOVF   6C,W
08F3:  MOVWF  75
08F4:  MOVF   6D,W
08F5:  MOVWF  74
08F6:  MOVF   6E,W
08F7:  MOVWF  73
08F8:  GOTO   101
08F9:  MOVF   67,W
08FA:  MOVWF  77
08FB:  MOVF   68,W
08FC:  MOVWF  75
08FD:  MOVF   69,W
08FE:  MOVWF  74
08FF:  MOVF   6A,W
0900:  MOVWF  73
0901:  MOVF   75,W
0902:  MOVWF  78
0903:  MOVF   74,W
0904:  MOVWF  79
0905:  MOVF   73,W
0906:  MOVWF  7A
0907:  GOTO   140
0908:  CLRF   77
0909:  CLRF   78
090A:  CLRF   79
090B:  CLRF   7A
090C:  GOTO   140
090D:  CLRF   72
090E:  COMF   73,F
090F:  COMF   74,F
0910:  COMF   75,F
0911:  COMF   72,F
0912:  INCF   72,F
0913:  BTFSS  03.2
0914:  GOTO   11B
0915:  INCF   73,F
0916:  BTFSS  03.2
0917:  GOTO   11B
0918:  INCF   74,F
0919:  BTFSC  03.2
091A:  INCF   75,F
091B:  BTFSC  71.0
091C:  GOTO   029
091D:  BTFSC  71.1
091E:  GOTO   06B
091F:  BTFSC  71.2
0920:  GOTO   0A1
0921:  GOTO   0D0
0922:  MOVF   00,W
0923:  ADDWF  73,F
0924:  BTFSS  03.0
0925:  GOTO   12C
0926:  INCF   74,F
0927:  BTFSS  03.2
0928:  GOTO   12C
0929:  INCF   75,F
092A:  BTFSC  03.2
092B:  BSF    6F.0
092C:  DECF   04,F
092D:  MOVF   00,W
092E:  ADDWF  74,F
092F:  BTFSS  03.0
0930:  GOTO   134
0931:  INCF   75,F
0932:  BTFSC  03.2
0933:  BSF    6F.0
0934:  DECF   04,F
0935:  MOVF   00,W
0936:  BTFSS  00.7
0937:  XORLW  80
0938:  ADDWF  75,F
0939:  BTFSC  03.0
093A:  BSF    6F.0
093B:  BTFSC  71.4
093C:  GOTO   030
093D:  BTFSC  71.5
093E:  GOTO   072
093F:  GOTO   0A8
0940:  RETURN
0941:  MOVF   04,W
0942:  MOVWF  44
0943:  MOVF   43,W
0944:  MOVWF  46
0945:  BTFSC  03.2
0946:  GOTO   162
0947:  MOVF   42,W
0948:  MOVWF  6E
0949:  MOVF   41,W
094A:  MOVWF  6D
094B:  MOVF   40,W
094C:  MOVWF  6C
094D:  MOVF   3F,W
094E:  MOVWF  6B
094F:  CLRF   72
0950:  CLRF   71
0951:  MOVLW  20
0952:  MOVWF  70
0953:  MOVLW  82
0954:  MOVWF  6F
0955:  BCF    0A.3
0956:  CALL   67B
0957:  BSF    0A.3
0958:  MOVF   7A,W
0959:  MOVWF  42
095A:  MOVF   79,W
095B:  MOVWF  41
095C:  MOVF   78,W
095D:  MOVWF  40
095E:  MOVF   77,W
095F:  MOVWF  3F
0960:  DECFSZ 46,F
0961:  GOTO   147
0962:  MOVF   42,W
0963:  MOVWF  4F
0964:  MOVF   41,W
0965:  MOVWF  4E
0966:  MOVF   40,W
0967:  MOVWF  4D
0968:  MOVF   3F,W
0969:  MOVWF  4C
096A:  MOVF   4C,W
096B:  SUBLW  B6
096C:  MOVWF  4C
096D:  CLRF   7A
096E:  MOVF   4D,W
096F:  MOVWF  50
0970:  BSF    4D.7
0971:  BCF    03.0
0972:  RRF    4D,F
0973:  RRF    4E,F
0974:  RRF    4F,F
0975:  RRF    7A,F
0976:  RRF    79,F
0977:  RRF    78,F
0978:  RRF    77,F
0979:  DECFSZ 4C,F
097A:  GOTO   171
097B:  BTFSS  50.7
097C:  GOTO   188
097D:  COMF   77,F
097E:  COMF   78,F
097F:  COMF   79,F
0980:  COMF   7A,F
0981:  INCF   77,F
0982:  BTFSC  03.2
0983:  INCF   78,F
0984:  BTFSC  03.2
0985:  INCF   79,F
0986:  BTFSC  03.2
0987:  INCF   7A,F
0988:  MOVF   7A,W
0989:  MOVWF  42
098A:  MOVF   79,W
098B:  MOVWF  41
098C:  MOVF   78,W
098D:  MOVWF  40
098E:  MOVF   77,W
098F:  MOVWF  3F
0990:  BTFSS  42.7
0991:  GOTO   19F
0992:  DECF   44,F
0993:  BSF    44.5
0994:  COMF   3F,F
0995:  COMF   40,F
0996:  COMF   41,F
0997:  COMF   42,F
0998:  INCF   3F,F
0999:  BTFSC  03.2
099A:  INCF   40,F
099B:  BTFSC  03.2
099C:  INCF   41,F
099D:  BTFSC  03.2
099E:  INCF   42,F
099F:  MOVLW  3B
09A0:  MOVWF  4B
09A1:  MOVLW  9A
09A2:  MOVWF  4A
09A3:  MOVLW  CA
09A4:  MOVWF  49
09A5:  CLRF   48
09A6:  MOVLW  0A
09A7:  MOVWF  46
09A8:  MOVF   43,W
09A9:  BTFSC  03.2
09AA:  INCF   44,F
09AB:  BSF    03.1
09AC:  MOVLW  3F
09AD:  MOVWF  04
09AE:  BCF    03.7
09AF:  MOVF   42,W
09B0:  MOVWF  4F
09B1:  MOVF   41,W
09B2:  MOVWF  4E
09B3:  MOVF   40,W
09B4:  MOVWF  4D
09B5:  MOVF   3F,W
09B6:  MOVWF  4C
09B7:  MOVF   4B,W
09B8:  MOVWF  53
09B9:  MOVF   4A,W
09BA:  MOVWF  52
09BB:  MOVF   49,W
09BC:  MOVWF  51
09BD:  MOVF   48,W
09BE:  MOVWF  50
09BF:  BCF    0A.3
09C0:  CALL   74D
09C1:  BSF    0A.3
09C2:  MOVF   78,W
09C3:  MOVF   77,F
09C4:  BTFSS  03.2
09C5:  GOTO   1D9
09C6:  INCF   43,W
09C7:  SUBWF  46,W
09C8:  BTFSC  03.2
09C9:  GOTO   1D9
09CA:  MOVF   44,W
09CB:  BTFSC  03.2
09CC:  GOTO   1DB
09CD:  ANDLW  0F
09CE:  SUBWF  46,W
09CF:  BTFSC  03.2
09D0:  GOTO   1D3
09D1:  BTFSC  03.0
09D2:  GOTO   213
09D3:  BTFSC  44.7
09D4:  GOTO   213
09D5:  BTFSC  44.6
09D6:  GOTO   1DB
09D7:  MOVLW  20
09D8:  GOTO   20D
09D9:  MOVLW  20
09DA:  ANDWF  44,F
09DB:  BTFSS  44.5
09DC:  GOTO   1EB
09DD:  BCF    44.5
09DE:  MOVF   43,W
09DF:  BTFSS  03.2
09E0:  DECF   44,F
09E1:  MOVF   77,W
09E2:  MOVWF  44
09E3:  MOVLW  2D
09E4:  MOVWF  4C
09E5:  BCF    0A.3
09E6:  CALL   2AF
09E7:  BSF    0A.3
09E8:  MOVF   44,W
09E9:  MOVWF  77
09EA:  CLRF   44
09EB:  MOVF   43,W
09EC:  SUBWF  46,W
09ED:  BTFSS  03.2
09EE:  GOTO   1FB
09EF:  MOVF   77,W
09F0:  MOVWF  44
09F1:  MOVLW  2E
09F2:  MOVWF  4C
09F3:  BCF    0A.3
09F4:  CALL   2AF
09F5:  BSF    0A.3
09F6:  MOVF   44,W
09F7:  MOVWF  77
09F8:  MOVLW  20
09F9:  ANDWF  44,F
09FA:  MOVLW  00
09FB:  MOVLW  30
09FC:  BTFSS  44.5
09FD:  GOTO   20D
09FE:  BCF    44.5
09FF:  MOVF   43,W
0A00:  BTFSS  03.2
0A01:  DECF   44,F
0A02:  MOVF   77,W
0A03:  MOVWF  44
0A04:  MOVLW  2D
0A05:  MOVWF  4C
0A06:  BCF    0A.3
0A07:  CALL   2AF
0A08:  BSF    0A.3
0A09:  MOVF   44,W
0A0A:  MOVWF  77
0A0B:  CLRF   44
0A0C:  MOVLW  30
0A0D:  ADDWF  77,F
0A0E:  MOVF   77,W
0A0F:  MOVWF  4C
0A10:  BCF    0A.3
0A11:  CALL   2AF
0A12:  BSF    0A.3
0A13:  BCF    03.1
0A14:  MOVF   4B,W
0A15:  MOVWF  4F
0A16:  MOVF   4A,W
0A17:  MOVWF  4E
0A18:  MOVF   49,W
0A19:  MOVWF  4D
0A1A:  MOVF   48,W
0A1B:  MOVWF  4C
0A1C:  CLRF   53
0A1D:  CLRF   52
0A1E:  CLRF   51
0A1F:  MOVLW  0A
0A20:  MOVWF  50
0A21:  BCF    0A.3
0A22:  CALL   74D
0A23:  BSF    0A.3
0A24:  MOVF   7A,W
0A25:  MOVWF  4B
0A26:  MOVF   79,W
0A27:  MOVWF  4A
0A28:  MOVF   78,W
0A29:  MOVWF  49
0A2A:  MOVF   77,W
0A2B:  MOVWF  48
0A2C:  DECFSZ 46,F
0A2D:  GOTO   1AB
0A2E:  RETURN
0A2F:  MOVF   43,W
0A30:  BTFSC  03.2
0A31:  GOTO   2F4
0A32:  MOVWF  4F
0A33:  MOVF   47,W
0A34:  BTFSC  03.2
0A35:  GOTO   2F4
0A36:  SUBWF  4F,F
0A37:  BTFSS  03.0
0A38:  GOTO   23E
0A39:  MOVLW  7F
0A3A:  ADDWF  4F,F
0A3B:  BTFSC  03.0
0A3C:  GOTO   2F4
0A3D:  GOTO   244
0A3E:  MOVLW  81
0A3F:  SUBWF  4F,F
0A40:  BTFSS  03.0
0A41:  GOTO   2F4
0A42:  BTFSC  03.2
0A43:  GOTO   2F4
0A44:  MOVF   4F,W
0A45:  MOVWF  77
0A46:  CLRF   78
0A47:  CLRF   79
0A48:  CLRF   7A
0A49:  CLRF   4E
0A4A:  MOVF   44,W
0A4B:  MOVWF  4D
0A4C:  BSF    4D.7
0A4D:  MOVF   45,W
0A4E:  MOVWF  4C
0A4F:  MOVF   46,W
0A50:  MOVWF  4B
0A51:  MOVLW  19
0A52:  MOVWF  4F
0A53:  MOVF   4A,W
0A54:  SUBWF  4B,F
0A55:  BTFSC  03.0
0A56:  GOTO   267
0A57:  MOVLW  01
0A58:  SUBWF  4C,F
0A59:  BTFSC  03.0
0A5A:  GOTO   267
0A5B:  SUBWF  4D,F
0A5C:  BTFSC  03.0
0A5D:  GOTO   267
0A5E:  SUBWF  4E,F
0A5F:  BTFSC  03.0
0A60:  GOTO   267
0A61:  INCF   4E,F
0A62:  INCF   4D,F
0A63:  INCF   4C,F
0A64:  MOVF   4A,W
0A65:  ADDWF  4B,F
0A66:  GOTO   299
0A67:  MOVF   49,W
0A68:  SUBWF  4C,F
0A69:  BTFSC  03.0
0A6A:  GOTO   282
0A6B:  MOVLW  01
0A6C:  SUBWF  4D,F
0A6D:  BTFSC  03.0
0A6E:  GOTO   282
0A6F:  SUBWF  4E,F
0A70:  BTFSC  03.0
0A71:  GOTO   282
0A72:  INCF   4E,F
0A73:  INCF   4D,F
0A74:  MOVF   49,W
0A75:  ADDWF  4C,F
0A76:  MOVF   4A,W
0A77:  ADDWF  4B,F
0A78:  BTFSS  03.0
0A79:  GOTO   299
0A7A:  INCF   4C,F
0A7B:  BTFSS  03.2
0A7C:  GOTO   299
0A7D:  INCF   4D,F
0A7E:  BTFSS  03.2
0A7F:  GOTO   299
0A80:  INCF   4E,F
0A81:  GOTO   299
0A82:  MOVF   48,W
0A83:  IORLW  80
0A84:  SUBWF  4D,F
0A85:  BTFSC  03.0
0A86:  GOTO   298
0A87:  MOVLW  01
0A88:  SUBWF  4E,F
0A89:  BTFSC  03.0
0A8A:  GOTO   298
0A8B:  INCF   4E,F
0A8C:  MOVF   48,W
0A8D:  IORLW  80
0A8E:  ADDWF  4D,F
0A8F:  MOVF   49,W
0A90:  ADDWF  4C,F
0A91:  BTFSS  03.0
0A92:  GOTO   276
0A93:  INCF   4D,F
0A94:  BTFSS  03.2
0A95:  GOTO   276
0A96:  INCF   4E,F
0A97:  GOTO   276
0A98:  BSF    7A.0
0A99:  DECFSZ 4F,F
0A9A:  GOTO   29C
0A9B:  GOTO   2A7
0A9C:  BCF    03.0
0A9D:  RLF    4B,F
0A9E:  RLF    4C,F
0A9F:  RLF    4D,F
0AA0:  RLF    4E,F
0AA1:  BCF    03.0
0AA2:  RLF    7A,F
0AA3:  RLF    79,F
0AA4:  RLF    78,F
0AA5:  RLF    50,F
0AA6:  GOTO   253
0AA7:  BTFSS  50.0
0AA8:  GOTO   2AF
0AA9:  BCF    03.0
0AAA:  RRF    78,F
0AAB:  RRF    79,F
0AAC:  RRF    7A,F
0AAD:  RRF    50,F
0AAE:  GOTO   2B2
0AAF:  DECF   77,F
0AB0:  BTFSC  03.2
0AB1:  GOTO   2F4
0AB2:  BTFSC  50.7
0AB3:  GOTO   2DB
0AB4:  BCF    03.0
0AB5:  RLF    4B,F
0AB6:  RLF    4C,F
0AB7:  RLF    4D,F
0AB8:  RLF    4E,F
0AB9:  MOVF   4A,W
0ABA:  SUBWF  4B,F
0ABB:  BTFSC  03.0
0ABC:  GOTO   2C7
0ABD:  MOVLW  01
0ABE:  SUBWF  4C,F
0ABF:  BTFSC  03.0
0AC0:  GOTO   2C7
0AC1:  SUBWF  4D,F
0AC2:  BTFSC  03.0
0AC3:  GOTO   2C7
0AC4:  SUBWF  4E,F
0AC5:  BTFSS  03.0
0AC6:  GOTO   2EA
0AC7:  MOVF   49,W
0AC8:  SUBWF  4C,F
0AC9:  BTFSC  03.0
0ACA:  GOTO   2D2
0ACB:  MOVLW  01
0ACC:  SUBWF  4D,F
0ACD:  BTFSC  03.0
0ACE:  GOTO   2D2
0ACF:  SUBWF  4E,F
0AD0:  BTFSS  03.0
0AD1:  GOTO   2EA
0AD2:  MOVF   48,W
0AD3:  IORLW  80
0AD4:  SUBWF  4D,F
0AD5:  BTFSC  03.0
0AD6:  GOTO   2DB
0AD7:  MOVLW  01
0AD8:  SUBWF  4E,F
0AD9:  BTFSS  03.0
0ADA:  GOTO   2EA
0ADB:  INCF   7A,F
0ADC:  BTFSS  03.2
0ADD:  GOTO   2EA
0ADE:  INCF   79,F
0ADF:  BTFSS  03.2
0AE0:  GOTO   2EA
0AE1:  INCF   78,F
0AE2:  BTFSS  03.2
0AE3:  GOTO   2EA
0AE4:  INCF   77,F
0AE5:  BTFSC  03.2
0AE6:  GOTO   2F4
0AE7:  RRF    78,F
0AE8:  RRF    79,F
0AE9:  RRF    7A,F
0AEA:  MOVF   44,W
0AEB:  MOVWF  4F
0AEC:  MOVF   48,W
0AED:  XORWF  4F,F
0AEE:  BTFSS  4F.7
0AEF:  GOTO   2F2
0AF0:  BSF    78.7
0AF1:  GOTO   2F8
0AF2:  BCF    78.7
0AF3:  GOTO   2F8
0AF4:  CLRF   77
0AF5:  CLRF   78
0AF6:  CLRF   79
0AF7:  CLRF   7A
0AF8:  BSF    0A.3
0AF9:  BCF    0A.4
0AFA:  GOTO   66E (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay (clock=80000000) 
*
00BF:  MOVLW  4D
00C0:  MOVWF  04
00C1:  BCF    03.7
00C2:  MOVF   00,W
00C3:  BTFSC  03.2
00C4:  GOTO   0D2
00C5:  MOVLW  19
00C6:  MOVWF  78
00C7:  CLRF   77
00C8:  DECFSZ 77,F
00C9:  GOTO   0C8
00CA:  DECFSZ 78,F
00CB:  GOTO   0C7
00CC:  MOVLW  F0
00CD:  MOVWF  77
00CE:  DECFSZ 77,F
00CF:  GOTO   0CE
00D0:  DECFSZ 00,F
00D1:  GOTO   0C5
00D2:  RETURN
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
015A:  BSF    07.2
....................    output_float(LCD_DATA5); 
015B:  BSF    07.3
....................    output_float(LCD_DATA6); 
015C:  BSF    07.4
....................    output_float(LCD_DATA7); 
015D:  BSF    07.5
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
015E:  BCF    03.5
015F:  BSF    07.6
0160:  BCF    2B.6
0161:  MOVF   2B,W
0162:  BSF    03.5
0163:  MOVWF  07
....................    delay_cycles(1); 
0164:  NOP
....................    lcd_output_enable(1); 
0165:  BCF    03.5
0166:  BSF    07.1
0167:  BCF    2B.1
0168:  MOVF   2B,W
0169:  BSF    03.5
016A:  MOVWF  07
....................    delay_cycles(1); 
016B:  NOP
....................    high = lcd_read_nibble(); 
016C:  BCF    03.5
016D:  CALL   10D
016E:  MOVF   78,W
016F:  MOVWF  54
....................        
....................    lcd_output_enable(0); 
0170:  BCF    07.1
0171:  BCF    2B.1
0172:  MOVF   2B,W
0173:  BSF    03.5
0174:  MOVWF  07
....................    delay_cycles(1); 
0175:  NOP
....................    lcd_output_enable(1); 
0176:  BCF    03.5
0177:  BSF    07.1
0178:  BCF    2B.1
0179:  MOVF   2B,W
017A:  BSF    03.5
017B:  MOVWF  07
....................    delay_us(1); 
017C:  MOVLW  06
017D:  MOVWF  77
017E:  DECFSZ 77,F
017F:  GOTO   17E
0180:  NOP
....................    low = lcd_read_nibble(); 
0181:  BCF    03.5
0182:  CALL   10D
0183:  MOVF   78,W
0184:  MOVWF  53
....................        
....................    lcd_output_enable(0); 
0185:  BCF    07.1
0186:  BCF    2B.1
0187:  MOVF   2B,W
0188:  BSF    03.5
0189:  MOVWF  07
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
018A:  BCF    03.5
018B:  BCF    2B.2
018C:  MOVF   2B,W
018D:  BSF    03.5
018E:  MOVWF  07
....................    output_drive(LCD_DATA5); 
018F:  BCF    03.5
0190:  BCF    2B.3
0191:  MOVF   2B,W
0192:  BSF    03.5
0193:  MOVWF  07
....................    output_drive(LCD_DATA6); 
0194:  BCF    03.5
0195:  BCF    2B.4
0196:  MOVF   2B,W
0197:  BSF    03.5
0198:  MOVWF  07
....................    output_drive(LCD_DATA7); 
0199:  BCF    03.5
019A:  BCF    2B.5
019B:  MOVF   2B,W
019C:  BSF    03.5
019D:  MOVWF  07
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
019E:  BCF    03.5
019F:  SWAPF  54,W
01A0:  MOVWF  77
01A1:  MOVLW  F0
01A2:  ANDWF  77,F
01A3:  MOVF   77,W
01A4:  IORWF  53,W
01A5:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
010D:  CLRF   55
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
010E:  BSF    2B.2
010F:  MOVF   2B,W
0110:  BSF    03.5
0111:  MOVWF  07
0112:  MOVLW  00
0113:  BCF    03.5
0114:  BTFSC  07.2
0115:  MOVLW  01
0116:  IORWF  55,F
....................    n |= input(LCD_DATA5) << 1; 
0117:  BSF    2B.3
0118:  MOVF   2B,W
0119:  BSF    03.5
011A:  MOVWF  07
011B:  MOVLW  00
011C:  BCF    03.5
011D:  BTFSC  07.3
011E:  MOVLW  01
011F:  MOVWF  77
0120:  BCF    03.0
0121:  RLF    77,F
0122:  MOVF   77,W
0123:  IORWF  55,F
....................    n |= input(LCD_DATA6) << 2; 
0124:  BSF    2B.4
0125:  MOVF   2B,W
0126:  BSF    03.5
0127:  MOVWF  07
0128:  MOVLW  00
0129:  BCF    03.5
012A:  BTFSC  07.4
012B:  MOVLW  01
012C:  MOVWF  77
012D:  RLF    77,F
012E:  RLF    77,F
012F:  MOVLW  FC
0130:  ANDWF  77,F
0131:  MOVF   77,W
0132:  IORWF  55,F
....................    n |= input(LCD_DATA7) << 3; 
0133:  BSF    2B.5
0134:  MOVF   2B,W
0135:  BSF    03.5
0136:  MOVWF  07
0137:  MOVLW  00
0138:  BCF    03.5
0139:  BTFSC  07.5
013A:  MOVLW  01
013B:  MOVWF  77
013C:  RLF    77,F
013D:  RLF    77,F
013E:  RLF    77,F
013F:  MOVLW  F8
0140:  ANDWF  77,F
0141:  MOVF   77,W
0142:  IORWF  55,F
....................     
....................    return(n); 
0143:  MOVF   55,W
0144:  MOVWF  78
....................   #else 
0145:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
00D3:  BTFSC  54.0
00D4:  GOTO   0D7
00D5:  BCF    07.2
00D6:  GOTO   0D8
00D7:  BSF    07.2
00D8:  BCF    2B.2
00D9:  MOVF   2B,W
00DA:  BSF    03.5
00DB:  MOVWF  07
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
00DC:  BCF    03.5
00DD:  BTFSC  54.1
00DE:  GOTO   0E1
00DF:  BCF    07.3
00E0:  GOTO   0E2
00E1:  BSF    07.3
00E2:  BCF    2B.3
00E3:  MOVF   2B,W
00E4:  BSF    03.5
00E5:  MOVWF  07
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00E6:  BCF    03.5
00E7:  BTFSC  54.2
00E8:  GOTO   0EB
00E9:  BCF    07.4
00EA:  GOTO   0EC
00EB:  BSF    07.4
00EC:  BCF    2B.4
00ED:  MOVF   2B,W
00EE:  BSF    03.5
00EF:  MOVWF  07
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00F0:  BCF    03.5
00F1:  BTFSC  54.3
00F2:  GOTO   0F5
00F3:  BCF    07.5
00F4:  GOTO   0F6
00F5:  BSF    07.5
00F6:  BCF    2B.5
00F7:  MOVF   2B,W
00F8:  BSF    03.5
00F9:  MOVWF  07
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00FA:  NOP
....................    lcd_output_enable(1); 
00FB:  BCF    03.5
00FC:  BSF    07.1
00FD:  BCF    2B.1
00FE:  MOVF   2B,W
00FF:  BSF    03.5
0100:  MOVWF  07
....................    delay_us(2); 
0101:  MOVLW  0D
0102:  MOVWF  77
0103:  DECFSZ 77,F
0104:  GOTO   103
....................    lcd_output_enable(0); 
0105:  BCF    03.5
0106:  BCF    07.1
0107:  BCF    2B.1
0108:  MOVF   2B,W
0109:  BSF    03.5
010A:  MOVWF  07
010B:  BCF    03.5
010C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0146:  BCF    2B.1
0147:  MOVF   2B,W
0148:  BSF    03.5
0149:  MOVWF  07
....................    lcd_rs_tris(); 
014A:  BCF    03.5
014B:  BCF    2B.0
014C:  MOVF   2B,W
014D:  BSF    03.5
014E:  MOVWF  07
....................    lcd_rw_tris(); 
014F:  BCF    03.5
0150:  BCF    2B.6
0151:  MOVF   2B,W
0152:  BSF    03.5
0153:  MOVWF  07
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0154:  BCF    03.5
0155:  BCF    07.0
0156:  BCF    2B.0
0157:  MOVF   2B,W
0158:  BSF    03.5
0159:  MOVWF  07
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
01A6:  MOVF   78,W
01A7:  MOVWF  53
01A8:  BTFSS  53.7
01A9:  GOTO   1AC
01AA:  BSF    03.5
01AB:  GOTO   15A
....................    lcd_output_rs(address); 
01AC:  MOVF   51,F
01AD:  BTFSS  03.2
01AE:  GOTO   1B1
01AF:  BCF    07.0
01B0:  GOTO   1B2
01B1:  BSF    07.0
01B2:  BCF    2B.0
01B3:  MOVF   2B,W
01B4:  BSF    03.5
01B5:  MOVWF  07
....................    delay_cycles(1); 
01B6:  NOP
....................    lcd_output_rw(0); 
01B7:  BCF    03.5
01B8:  BCF    07.6
01B9:  BCF    2B.6
01BA:  MOVF   2B,W
01BB:  BSF    03.5
01BC:  MOVWF  07
....................    delay_cycles(1); 
01BD:  NOP
....................    lcd_output_enable(0); 
01BE:  BCF    03.5
01BF:  BCF    07.1
01C0:  BCF    2B.1
01C1:  MOVF   2B,W
01C2:  BSF    03.5
01C3:  MOVWF  07
....................    lcd_send_nibble(n >> 4); 
01C4:  BCF    03.5
01C5:  SWAPF  52,W
01C6:  MOVWF  53
01C7:  MOVLW  0F
01C8:  ANDWF  53,F
01C9:  MOVF   53,W
01CA:  MOVWF  54
01CB:  CALL   0D3
....................    lcd_send_nibble(n & 0xf); 
01CC:  MOVF   52,W
01CD:  ANDLW  0F
01CE:  MOVWF  53
01CF:  MOVWF  54
01D0:  CALL   0D3
01D1:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
01D2:  MOVLW  28
01D3:  MOVWF  40
01D4:  MOVLW  0C
01D5:  MOVWF  41
01D6:  MOVLW  01
01D7:  MOVWF  42
01D8:  MOVLW  06
01D9:  MOVWF  43
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
01DA:  BCF    07.1
01DB:  BCF    2B.1
01DC:  MOVF   2B,W
01DD:  BSF    03.5
01DE:  MOVWF  07
....................    lcd_output_rs(0); 
01DF:  BCF    03.5
01E0:  BCF    07.0
01E1:  BCF    2B.0
01E2:  MOVF   2B,W
01E3:  BSF    03.5
01E4:  MOVWF  07
....................    lcd_output_rw(0); 
01E5:  BCF    03.5
01E6:  BCF    07.6
01E7:  BCF    2B.6
01E8:  MOVF   2B,W
01E9:  BSF    03.5
01EA:  MOVWF  07
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
01EB:  BCF    03.5
01EC:  BCF    2B.2
01ED:  MOVF   2B,W
01EE:  BSF    03.5
01EF:  MOVWF  07
....................    output_drive(LCD_DATA5); 
01F0:  BCF    03.5
01F1:  BCF    2B.3
01F2:  MOVF   2B,W
01F3:  BSF    03.5
01F4:  MOVWF  07
....................    output_drive(LCD_DATA6); 
01F5:  BCF    03.5
01F6:  BCF    2B.4
01F7:  MOVF   2B,W
01F8:  BSF    03.5
01F9:  MOVWF  07
....................    output_drive(LCD_DATA7); 
01FA:  BCF    03.5
01FB:  BCF    2B.5
01FC:  MOVF   2B,W
01FD:  BSF    03.5
01FE:  MOVWF  07
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
01FF:  BCF    03.5
0200:  BCF    2B.1
0201:  MOVF   2B,W
0202:  BSF    03.5
0203:  MOVWF  07
....................    lcd_rs_tris(); 
0204:  BCF    03.5
0205:  BCF    2B.0
0206:  MOVF   2B,W
0207:  BSF    03.5
0208:  MOVWF  07
....................    lcd_rw_tris(); 
0209:  BCF    03.5
020A:  BCF    2B.6
020B:  MOVF   2B,W
020C:  BSF    03.5
020D:  MOVWF  07
....................  #endif 
....................      
....................    delay_ms(15); 
020E:  MOVLW  0F
020F:  BCF    03.5
0210:  MOVWF  4D
0211:  CALL   0BF
....................    for(i=1;i<=3;++i) 
0212:  MOVLW  01
0213:  MOVWF  3F
0214:  MOVF   3F,W
0215:  SUBLW  03
0216:  BTFSS  03.0
0217:  GOTO   220
....................    { 
....................        lcd_send_nibble(3); 
0218:  MOVLW  03
0219:  MOVWF  54
021A:  CALL   0D3
....................        delay_ms(5); 
021B:  MOVLW  05
021C:  MOVWF  4D
021D:  CALL   0BF
021E:  INCF   3F,F
021F:  GOTO   214
....................    } 
....................     
....................    lcd_send_nibble(2); 
0220:  MOVLW  02
0221:  MOVWF  54
0222:  CALL   0D3
....................    delay_ms(5); 
0223:  MOVLW  05
0224:  MOVWF  4D
0225:  CALL   0BF
....................    for(i=0;i<=3;++i) 
0226:  CLRF   3F
0227:  MOVF   3F,W
0228:  SUBLW  03
0229:  BTFSS  03.0
022A:  GOTO   237
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
022B:  MOVLW  40
022C:  ADDWF  3F,W
022D:  MOVWF  04
022E:  BCF    03.7
022F:  MOVF   00,W
0230:  MOVWF  44
0231:  CLRF   51
0232:  MOVF   44,W
0233:  MOVWF  52
0234:  CALL   146
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0235:  INCF   3F,F
0236:  GOTO   227
0237:  BSF    0A.3
0238:  BCF    0A.4
0239:  GOTO   334 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
029D:  DECFSZ 4E,W
029E:  GOTO   2A0
029F:  GOTO   2A3
....................       address=LCD_LINE_TWO; 
02A0:  MOVLW  40
02A1:  MOVWF  4F
02A2:  GOTO   2A4
....................    else 
....................       address=0; 
02A3:  CLRF   4F
....................       
....................    address+=x-1; 
02A4:  MOVLW  01
02A5:  SUBWF  4D,W
02A6:  ADDWF  4F,F
....................    lcd_send_byte(0,0x80|address); 
02A7:  MOVF   4F,W
02A8:  IORLW  80
02A9:  MOVWF  50
02AA:  CLRF   51
02AB:  MOVF   50,W
02AC:  MOVWF  52
02AD:  CALL   146
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
02AE:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
02AF:  MOVF   4C,W
02B0:  XORLW  07
02B1:  BTFSC  03.2
02B2:  GOTO   2BD
02B3:  XORLW  0B
02B4:  BTFSC  03.2
02B5:  GOTO   2C2
02B6:  XORLW  06
02B7:  BTFSC  03.2
02B8:  GOTO   2CA
02B9:  XORLW  02
02BA:  BTFSC  03.2
02BB:  GOTO   2D0
02BC:  GOTO   2D5
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
02BD:  MOVLW  01
02BE:  MOVWF  4D
02BF:  MOVWF  4E
02C0:  CALL   29D
02C1:  GOTO   2DA
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
02C2:  CLRF   51
02C3:  MOVLW  01
02C4:  MOVWF  52
02C5:  CALL   146
....................                      delay_ms(2); 
02C6:  MOVLW  02
02C7:  MOVWF  4D
02C8:  CALL   0BF
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
02C9:  GOTO   2DA
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
02CA:  MOVLW  01
02CB:  MOVWF  4D
02CC:  MOVLW  02
02CD:  MOVWF  4E
02CE:  CALL   29D
02CF:  GOTO   2DA
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
02D0:  CLRF   51
02D1:  MOVLW  10
02D2:  MOVWF  52
02D3:  CALL   146
02D4:  GOTO   2DA
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
02D5:  MOVLW  01
02D6:  MOVWF  51
02D7:  MOVF   4C,W
02D8:  MOVWF  52
02D9:  CALL   146
....................      #endif 
....................    } 
02DA:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include<SHT75.c> 
.................... #define sht_data_pin   PIN_D7 
.................... #define sht_clk_pin    PIN_D6 
....................  
....................  
.................... //***** Function to alert SHT75 ***** 
....................  
.................... void comstart (void) 
.................... { 
....................  output_float(sht_data_pin);  //data high 
*
023A:  BSF    03.5
023B:  BSF    08.7
....................  output_bit(sht_clk_pin, 0);  //clk low 
023C:  BCF    03.5
023D:  BCF    08.6
023E:  BSF    03.5
023F:  BCF    08.6
....................  delay_us(1); 
0240:  MOVLW  06
0241:  MOVWF  77
0242:  DECFSZ 77,F
0243:  GOTO   242
0244:  NOP
....................  output_bit(sht_clk_pin, 1);  //clk high 
0245:  BCF    03.5
0246:  BSF    08.6
0247:  BSF    03.5
0248:  BCF    08.6
....................  delay_us(1); 
0249:  MOVLW  06
024A:  MOVWF  77
024B:  DECFSZ 77,F
024C:  GOTO   24B
024D:  NOP
....................  output_bit(sht_data_pin, 0); //data low 
024E:  BCF    03.5
024F:  BCF    08.7
0250:  BSF    03.5
0251:  BCF    08.7
....................  delay_us(1); 
0252:  MOVLW  06
0253:  MOVWF  77
0254:  DECFSZ 77,F
0255:  GOTO   254
0256:  NOP
....................  output_bit(sht_clk_pin, 0);  //clk low 
0257:  BCF    03.5
0258:  BCF    08.6
0259:  BSF    03.5
025A:  BCF    08.6
....................  delay_us(2); 
025B:  MOVLW  0D
025C:  MOVWF  77
025D:  DECFSZ 77,F
025E:  GOTO   25D
....................  output_bit(sht_clk_pin, 1);  //clk high 
025F:  BCF    03.5
0260:  BSF    08.6
0261:  BSF    03.5
0262:  BCF    08.6
....................  delay_us(1); 
0263:  MOVLW  06
0264:  MOVWF  77
0265:  DECFSZ 77,F
0266:  GOTO   265
0267:  NOP
....................  output_float(sht_data_pin);  //data high 
0268:  BSF    08.7
....................  delay_us(1); 
0269:  MOVLW  06
026A:  MOVWF  77
026B:  DECFSZ 77,F
026C:  GOTO   26B
026D:  NOP
....................  output_bit(sht_clk_pin, 0);  //clk low 
026E:  BCF    03.5
026F:  BCF    08.6
0270:  BSF    03.5
0271:  BCF    08.6
0272:  BCF    03.5
0273:  RETURN
.................... } 
....................  
....................  
.................... //***** Function to write data to SHT75 ***** 
....................  
.................... int1 comwrite (int8 iobyte) 
*
0574:  MOVLW  80
0575:  MOVWF  54
.................... { 
....................  int8 i, mask = 0x80; 
....................  int1 ack; 
....................  
....................  //Shift out command 
....................  delay_us(4); 
0576:  MOVLW  1A
0577:  MOVWF  77
0578:  DECFSZ 77,F
0579:  GOTO   578
057A:  NOP
....................  for(i=0; i<8; i++) 
057B:  CLRF   53
057C:  MOVF   53,W
057D:  SUBLW  07
057E:  BTFSS  03.0
057F:  GOTO   5A2
....................   { 
....................    output_bit(sht_clk_pin, 0);                          //clk low 
0580:  BCF    08.6
0581:  BSF    03.5
0582:  BCF    08.6
....................    if((iobyte & mask) > 0) output_float(sht_data_pin);  //data high if MSB high 
0583:  BCF    03.5
0584:  MOVF   52,W
0585:  ANDWF  54,W
0586:  BTFSC  03.2
0587:  GOTO   58C
0588:  BSF    03.5
0589:  BSF    08.7
058A:  GOTO   58F
058B:  BCF    03.5
....................    else output_bit(sht_data_pin, 0);                    //data low if MSB low 
058C:  BCF    08.7
058D:  BSF    03.5
058E:  BCF    08.7
....................    delay_us(1); 
058F:  MOVLW  06
0590:  MOVWF  77
0591:  DECFSZ 77,F
0592:  GOTO   591
0593:  NOP
....................    output_bit(sht_clk_pin, 1);                          //clk high 
0594:  BCF    03.5
0595:  BSF    08.6
0596:  BSF    03.5
0597:  BCF    08.6
....................    delay_us(1); 
0598:  MOVLW  06
0599:  MOVWF  77
059A:  DECFSZ 77,F
059B:  GOTO   59A
059C:  NOP
....................    mask = mask >> 1;                                    //shift to next bit 
059D:  BCF    03.0
059E:  BCF    03.5
059F:  RRF    54,F
05A0:  INCF   53,F
05A1:  GOTO   57C
....................   } 
....................  
....................  //Shift in ack 
....................  output_bit(sht_clk_pin, 0);  //clk low 
05A2:  BCF    08.6
05A3:  BSF    03.5
05A4:  BCF    08.6
....................  delay_us(1); 
05A5:  MOVLW  06
05A6:  MOVWF  77
05A7:  DECFSZ 77,F
05A8:  GOTO   5A7
05A9:  NOP
....................  ack = input(sht_data_pin);   //get ack bit 
05AA:  BSF    08.7
05AB:  BCF    03.5
05AC:  BCF    55.0
05AD:  BTFSC  08.7
05AE:  BSF    55.0
....................  output_bit(sht_clk_pin, 1);  //clk high 
05AF:  BSF    08.6
05B0:  BSF    03.5
05B1:  BCF    08.6
....................  delay_us(1); 
05B2:  MOVLW  06
05B3:  MOVWF  77
05B4:  DECFSZ 77,F
05B5:  GOTO   5B4
05B6:  NOP
....................  output_bit(sht_clk_pin, 0);  //clk low 
05B7:  BCF    03.5
05B8:  BCF    08.6
05B9:  BSF    03.5
05BA:  BCF    08.6
....................  return(ack); 
05BB:  MOVLW  00
05BC:  BCF    03.5
05BD:  BTFSC  55.0
05BE:  MOVLW  01
05BF:  MOVWF  78
05C0:  RETURN
.................... } 
....................  
....................  
.................... //***** Function to read data from SHT75 ***** 
....................  
.................... int16 comread (void) 
*
05E8:  CLRF   54
05E9:  CLRF   53
.................... { 
....................  int8 i; 
....................  int16 iobyte = 0; 
....................  const int16 mask0 = 0x0000; 
....................  const int16 mask1 = 0x0001; 
....................  
....................  //shift in MSB data 
....................  for(i=0; i<8; i++) 
05EA:  CLRF   52
05EB:  MOVF   52,W
05EC:  SUBLW  07
05ED:  BTFSS  03.0
05EE:  GOTO   60A
....................   { 
....................    iobyte = iobyte << 1; 
05EF:  BCF    03.0
05F0:  RLF    53,F
05F1:  RLF    54,F
....................    output_bit(sht_clk_pin, 1);                //clk high 
05F2:  BSF    08.6
05F3:  BSF    03.5
05F4:  BCF    08.6
....................    delay_us(1); 
05F5:  MOVLW  06
05F6:  MOVWF  77
05F7:  DECFSZ 77,F
05F8:  GOTO   5F7
05F9:  NOP
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
05FA:  BSF    08.7
05FB:  BCF    03.5
05FC:  BTFSS  08.7
05FD:  GOTO   5FF
05FE:  BSF    53.0
....................    else iobyte |= mask0; 
....................    output_bit(sht_clk_pin, 0);                //clk low 
05FF:  BCF    08.6
0600:  BSF    03.5
0601:  BCF    08.6
....................    delay_us(1); 
0602:  MOVLW  06
0603:  MOVWF  77
0604:  DECFSZ 77,F
0605:  GOTO   604
0606:  NOP
0607:  BCF    03.5
0608:  INCF   52,F
0609:  GOTO   5EB
....................   } 
....................  
....................  //send ack 0 bit 
....................  output_bit(sht_data_pin, 0); //data low 
060A:  BCF    08.7
060B:  BSF    03.5
060C:  BCF    08.7
....................  delay_us(1); 
060D:  MOVLW  06
060E:  MOVWF  77
060F:  DECFSZ 77,F
0610:  GOTO   60F
0611:  NOP
....................  output_bit(sht_clk_pin, 1);  //clk high 
0612:  BCF    03.5
0613:  BSF    08.6
0614:  BSF    03.5
0615:  BCF    08.6
....................  delay_us(2); 
0616:  MOVLW  0D
0617:  MOVWF  77
0618:  DECFSZ 77,F
0619:  GOTO   618
....................  output_bit(sht_clk_pin, 0);  //clk low 
061A:  BCF    03.5
061B:  BCF    08.6
061C:  BSF    03.5
061D:  BCF    08.6
....................  delay_us(1); 
061E:  MOVLW  06
061F:  MOVWF  77
0620:  DECFSZ 77,F
0621:  GOTO   620
0622:  NOP
....................  output_float(sht_data_pin);  //data high 
0623:  BSF    08.7
....................  
....................  //shift in LSB data 
....................  for(i=0; i<8; i++) 
0624:  BCF    03.5
0625:  CLRF   52
0626:  MOVF   52,W
0627:  SUBLW  07
0628:  BTFSS  03.0
0629:  GOTO   645
....................   { 
....................    iobyte = iobyte << 1; 
062A:  BCF    03.0
062B:  RLF    53,F
062C:  RLF    54,F
....................    output_bit(sht_clk_pin, 1);                //clk high 
062D:  BSF    08.6
062E:  BSF    03.5
062F:  BCF    08.6
....................    delay_us(1); 
0630:  MOVLW  06
0631:  MOVWF  77
0632:  DECFSZ 77,F
0633:  GOTO   632
0634:  NOP
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
0635:  BSF    08.7
0636:  BCF    03.5
0637:  BTFSS  08.7
0638:  GOTO   63A
0639:  BSF    53.0
....................    else iobyte |= mask0; 
....................    output_bit(sht_clk_pin, 0);                //clk low 
063A:  BCF    08.6
063B:  BSF    03.5
063C:  BCF    08.6
....................    delay_us(1); 
063D:  MOVLW  06
063E:  MOVWF  77
063F:  DECFSZ 77,F
0640:  GOTO   63F
0641:  NOP
0642:  BCF    03.5
0643:  INCF   52,F
0644:  GOTO   626
....................   } 
....................  
....................  //send ack 1 bit 
....................  output_float(sht_data_pin);  //data high 
0645:  BSF    03.5
0646:  BSF    08.7
....................  delay_us(1); 
0647:  MOVLW  06
0648:  MOVWF  77
0649:  DECFSZ 77,F
064A:  GOTO   649
064B:  NOP
....................  output_bit(sht_clk_pin, 1);  //clk high 
064C:  BCF    03.5
064D:  BSF    08.6
064E:  BSF    03.5
064F:  BCF    08.6
....................  delay_us(2); 
0650:  MOVLW  0D
0651:  MOVWF  77
0652:  DECFSZ 77,F
0653:  GOTO   652
....................  output_bit(sht_clk_pin, 0);  //clk low 
0654:  BCF    03.5
0655:  BCF    08.6
0656:  BSF    03.5
0657:  BCF    08.6
....................  
....................  return(iobyte); 
0658:  BCF    03.5
0659:  MOVF   53,W
065A:  MOVWF  78
065B:  MOVF   54,W
065C:  MOVWF  79
065D:  RETURN
.................... } 
....................  
....................  
.................... //***** Function to wait for SHT75 reading ***** 
....................  
.................... void comwait (void) 
.................... { 
....................  int16 sht_delay; 
....................  
....................  output_float(sht_data_pin);                     //data high 
*
05C1:  BSF    03.5
05C2:  BSF    08.7
....................  output_bit(sht_clk_pin, 0);                     //clk low 
05C3:  BCF    03.5
05C4:  BCF    08.6
05C5:  BSF    03.5
05C6:  BCF    08.6
....................  delay_us(1); 
05C7:  MOVLW  06
05C8:  MOVWF  77
05C9:  DECFSZ 77,F
05CA:  GOTO   5C9
05CB:  NOP
....................  for(sht_delay=0; sht_delay<30000; sht_delay++)  // wait for max 300ms 
05CC:  BCF    03.5
05CD:  CLRF   53
05CE:  CLRF   52
05CF:  MOVF   53,W
05D0:  SUBLW  75
05D1:  BTFSS  03.0
05D2:  GOTO   5E7
05D3:  BTFSS  03.2
05D4:  GOTO   5D9
05D5:  MOVF   52,W
05D6:  SUBLW  2F
05D7:  BTFSS  03.0
05D8:  GOTO   5E7
....................   { 
....................    if (!input(sht_data_pin)) break;              //if sht_data_pin low, SHT75 ready 
05D9:  BSF    03.5
05DA:  BSF    08.7
05DB:  BCF    03.5
05DC:  BTFSS  08.7
05DD:  GOTO   5E7
....................    delay_us(10); 
05DE:  MOVLW  42
05DF:  MOVWF  77
05E0:  DECFSZ 77,F
05E1:  GOTO   5E0
05E2:  NOP
05E3:  INCF   52,F
05E4:  BTFSC  03.2
05E5:  INCF   53,F
05E6:  GOTO   5CF
....................   } 
05E7:  RETURN
.................... } 
....................  
....................  
.................... //***** Function to reset SHT75 communication ***** 
....................  
.................... void comreset (void) 
.................... { 
....................  int8 i; 
....................  
....................  output_float(sht_data_pin);    //data high 
*
0274:  BSF    03.5
0275:  BSF    08.7
....................  output_bit(sht_clk_pin, 0);    //clk low 
0276:  BCF    03.5
0277:  BCF    08.6
0278:  BSF    03.5
0279:  BCF    08.6
....................  delay_us(2); 
027A:  MOVLW  0D
027B:  MOVWF  77
027C:  DECFSZ 77,F
027D:  GOTO   27C
....................  for(i=0; i<9; i++) 
027E:  BCF    03.5
027F:  CLRF   3F
0280:  MOVF   3F,W
0281:  SUBLW  08
0282:  BTFSS  03.0
0283:  GOTO   296
....................   { 
....................    output_bit(sht_clk_pin, 1);  //toggle clk 9 times 
0284:  BSF    08.6
0285:  BSF    03.5
0286:  BCF    08.6
....................    delay_us(2); 
0287:  MOVLW  0D
0288:  MOVWF  77
0289:  DECFSZ 77,F
028A:  GOTO   289
....................    output_bit(sht_clk_pin, 0); 
028B:  BCF    03.5
028C:  BCF    08.6
028D:  BSF    03.5
028E:  BCF    08.6
....................    delay_us(2); 
028F:  MOVLW  0D
0290:  MOVWF  77
0291:  DECFSZ 77,F
0292:  GOTO   291
0293:  BCF    03.5
0294:  INCF   3F,F
0295:  GOTO   280
....................  } 
....................  comstart(); 
0296:  CALL   23A
.................... } 
....................  
....................  
.................... //***** Function to soft reset SHT75 ***** 
....................  
.................... void sht_soft_reset (void) 
.................... { 
....................  comreset();           //SHT75 communication reset 
....................  comwrite(0x1e);       //send SHT75 reset command 
....................  delay_ms(15);         //pause 15 ms 
.................... } 
....................  
....................  
.................... //***** Function to measure SHT75 temperature ***** 
....................  
.................... int16 measuretemp (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................  
....................  comstart();             //alert SHT75 
*
0C0B:  BCF    0A.3
0C0C:  CALL   23A
0C0D:  BSF    0A.3
....................  ack = comwrite(0x03);   //send measure temp command and read ack status 
0C0E:  MOVLW  03
0C0F:  MOVWF  52
0C10:  BCF    0A.3
0C11:  CALL   574
0C12:  BSF    0A.3
0C13:  BCF    4F.0
0C14:  BTFSC  78.0
0C15:  BSF    4F.0
....................  if(ack == 1) return 0; 
0C16:  BTFSS  4F.0
0C17:  GOTO   41C
0C18:  MOVLW  00
0C19:  MOVWF  78
0C1A:  MOVWF  79
0C1B:  GOTO   42A
....................  comwait();              //wait for SHT75 measurement to complete 
0C1C:  BCF    0A.3
0C1D:  CALL   5C1
0C1E:  BSF    0A.3
....................  iobyte = comread();     //read SHT75 temp data 
0C1F:  BCF    0A.3
0C20:  CALL   5E8
0C21:  BSF    0A.3
0C22:  MOVF   79,W
0C23:  MOVWF  51
0C24:  MOVF   78,W
0C25:  MOVWF  50
....................  return iobyte ; 
0C26:  MOVF   50,W
0C27:  MOVWF  78
0C28:  MOVF   51,W
0C29:  MOVWF  79
.................... } 
....................  
....................  
.................... //***** Function to measure SHT75 RH ***** 
....................  
.................... int16 measurehumid (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................  
....................  comstart();            //alert SHT75 
*
0C2E:  BCF    0A.3
0C2F:  CALL   23A
0C30:  BSF    0A.3
....................  ack = comwrite(0x05);  //send measure RH command and read ack status 
0C31:  MOVLW  05
0C32:  MOVWF  52
0C33:  BCF    0A.3
0C34:  CALL   574
0C35:  BSF    0A.3
0C36:  BCF    4F.0
0C37:  BTFSC  78.0
0C38:  BSF    4F.0
....................  if(ack == 1) return 0; 
0C39:  BTFSS  4F.0
0C3A:  GOTO   43F
0C3B:  MOVLW  00
0C3C:  MOVWF  78
0C3D:  MOVWF  79
0C3E:  GOTO   44D
....................  comwait();             //wait for SHT75 measurement to complete 
0C3F:  BCF    0A.3
0C40:  CALL   5C1
0C41:  BSF    0A.3
....................  iobyte = comread();    //read SHT75 temp data 
0C42:  BCF    0A.3
0C43:  CALL   5E8
0C44:  BSF    0A.3
0C45:  MOVF   79,W
0C46:  MOVWF  51
0C47:  MOVF   78,W
0C48:  MOVWF  50
....................  return iobyte; 
0C49:  MOVF   50,W
0C4A:  MOVWF  78
0C4B:  MOVF   51,W
0C4C:  MOVWF  79
.................... } 
....................  
....................  
.................... //***** Function to calculate SHT75 temp & RH ***** 
....................  
.................... void calculate_data (int16 temp, int16 humid, float & tc, float & rhlin, float & rhtrue) 
.................... { 
....................  float  rh; 
....................  
....................  //calculate temperature reading 
....................  tc = ((float) temp * 0.01) - 40.0; 
*
0C59:  MOVF   50,W
0C5A:  MOVWF  64
0C5B:  MOVF   4F,W
0C5C:  MOVWF  63
0C5D:  BCF    0A.3
0C5E:  CALL   65E
0C5F:  BSF    0A.3
0C60:  MOVF   7A,W
0C61:  MOVWF  5A
0C62:  MOVF   79,W
0C63:  MOVWF  59
0C64:  MOVF   78,W
0C65:  MOVWF  58
0C66:  MOVF   77,W
0C67:  MOVWF  57
0C68:  MOVF   7A,W
0C69:  MOVWF  6E
0C6A:  MOVF   79,W
0C6B:  MOVWF  6D
0C6C:  MOVF   78,W
0C6D:  MOVWF  6C
0C6E:  MOVF   77,W
0C6F:  MOVWF  6B
0C70:  MOVLW  0A
0C71:  MOVWF  72
0C72:  MOVLW  D7
0C73:  MOVWF  71
0C74:  MOVLW  23
0C75:  MOVWF  70
0C76:  MOVLW  78
0C77:  MOVWF  6F
0C78:  BCF    0A.3
0C79:  CALL   67B
0C7A:  BSF    0A.3
0C7B:  MOVF   7A,W
0C7C:  MOVWF  5A
0C7D:  MOVF   79,W
0C7E:  MOVWF  59
0C7F:  MOVF   78,W
0C80:  MOVWF  58
0C81:  MOVF   77,W
0C82:  MOVWF  57
0C83:  BSF    03.1
0C84:  MOVF   7A,W
0C85:  MOVWF  6A
0C86:  MOVF   79,W
0C87:  MOVWF  69
0C88:  MOVF   78,W
0C89:  MOVWF  68
0C8A:  MOVF   77,W
0C8B:  MOVWF  67
0C8C:  CLRF   6E
0C8D:  CLRF   6D
0C8E:  MOVLW  20
0C8F:  MOVWF  6C
0C90:  MOVLW  84
0C91:  MOVWF  6B
0C92:  CALL   000
0C93:  MOVF   7A,W
0C94:  MOVWF  35
0C95:  MOVF   79,W
0C96:  MOVWF  34
0C97:  MOVF   78,W
0C98:  MOVWF  33
0C99:  MOVF   77,W
0C9A:  MOVWF  32
....................  
....................  //calculate Real RH reading 
....................  rh = (float) humid; 
0C9B:  MOVF   52,W
0C9C:  MOVWF  64
0C9D:  MOVF   51,W
0C9E:  MOVWF  63
0C9F:  BCF    0A.3
0CA0:  CALL   65E
0CA1:  BSF    0A.3
0CA2:  MOVF   7A,W
0CA3:  MOVWF  56
0CA4:  MOVF   79,W
0CA5:  MOVWF  55
0CA6:  MOVF   78,W
0CA7:  MOVWF  54
0CA8:  MOVF   77,W
0CA9:  MOVWF  53
....................  
....................  rhlin = (rh * 0.0405) - (rh * rh * 0.0000028) - 4.0; 
0CAA:  MOVF   56,W
0CAB:  MOVWF  6E
0CAC:  MOVF   55,W
0CAD:  MOVWF  6D
0CAE:  MOVF   54,W
0CAF:  MOVWF  6C
0CB0:  MOVF   53,W
0CB1:  MOVWF  6B
0CB2:  MOVLW  54
0CB3:  MOVWF  72
0CB4:  MOVLW  E3
0CB5:  MOVWF  71
0CB6:  MOVLW  25
0CB7:  MOVWF  70
0CB8:  MOVLW  7A
0CB9:  MOVWF  6F
0CBA:  BCF    0A.3
0CBB:  CALL   67B
0CBC:  BSF    0A.3
0CBD:  MOVF   7A,W
0CBE:  MOVWF  5A
0CBF:  MOVF   79,W
0CC0:  MOVWF  59
0CC1:  MOVF   78,W
0CC2:  MOVWF  58
0CC3:  MOVF   77,W
0CC4:  MOVWF  57
0CC5:  MOVF   56,W
0CC6:  MOVWF  6E
0CC7:  MOVF   55,W
0CC8:  MOVWF  6D
0CC9:  MOVF   54,W
0CCA:  MOVWF  6C
0CCB:  MOVF   53,W
0CCC:  MOVWF  6B
0CCD:  MOVF   56,W
0CCE:  MOVWF  72
0CCF:  MOVF   55,W
0CD0:  MOVWF  71
0CD1:  MOVF   54,W
0CD2:  MOVWF  70
0CD3:  MOVF   53,W
0CD4:  MOVWF  6F
0CD5:  BCF    0A.3
0CD6:  CALL   67B
0CD7:  BSF    0A.3
0CD8:  MOVF   7A,W
0CD9:  MOVWF  5E
0CDA:  MOVF   79,W
0CDB:  MOVWF  5D
0CDC:  MOVF   78,W
0CDD:  MOVWF  5C
0CDE:  MOVF   77,W
0CDF:  MOVWF  5B
0CE0:  MOVF   7A,W
0CE1:  MOVWF  6E
0CE2:  MOVF   79,W
0CE3:  MOVWF  6D
0CE4:  MOVF   78,W
0CE5:  MOVWF  6C
0CE6:  MOVF   77,W
0CE7:  MOVWF  6B
0CE8:  MOVLW  A2
0CE9:  MOVWF  72
0CEA:  MOVLW  E7
0CEB:  MOVWF  71
0CEC:  MOVLW  3B
0CED:  MOVWF  70
0CEE:  MOVLW  6C
0CEF:  MOVWF  6F
0CF0:  BCF    0A.3
0CF1:  CALL   67B
0CF2:  BSF    0A.3
0CF3:  BSF    03.1
0CF4:  MOVF   5A,W
0CF5:  MOVWF  6A
0CF6:  MOVF   59,W
0CF7:  MOVWF  69
0CF8:  MOVF   58,W
0CF9:  MOVWF  68
0CFA:  MOVF   57,W
0CFB:  MOVWF  67
0CFC:  MOVF   7A,W
0CFD:  MOVWF  6E
0CFE:  MOVF   79,W
0CFF:  MOVWF  6D
0D00:  MOVF   78,W
0D01:  MOVWF  6C
0D02:  MOVF   77,W
0D03:  MOVWF  6B
0D04:  CALL   000
0D05:  MOVF   7A,W
0D06:  MOVWF  5A
0D07:  MOVF   79,W
0D08:  MOVWF  59
0D09:  MOVF   78,W
0D0A:  MOVWF  58
0D0B:  MOVF   77,W
0D0C:  MOVWF  57
0D0D:  BSF    03.1
0D0E:  MOVF   7A,W
0D0F:  MOVWF  6A
0D10:  MOVF   79,W
0D11:  MOVWF  69
0D12:  MOVF   78,W
0D13:  MOVWF  68
0D14:  MOVF   77,W
0D15:  MOVWF  67
0D16:  CLRF   6E
0D17:  CLRF   6D
0D18:  CLRF   6C
0D19:  MOVLW  81
0D1A:  MOVWF  6B
0D1B:  CALL   000
0D1C:  MOVF   7A,W
0D1D:  MOVWF  46
0D1E:  MOVF   79,W
0D1F:  MOVWF  45
0D20:  MOVF   78,W
0D21:  MOVWF  44
0D22:  MOVF   77,W
0D23:  MOVWF  43
....................  
....................  //calculate True RH reading 
....................  rhtrue = ((tc - 25.0) * (0.01 + (0.00008 * rh))) + rhlin; 
0D24:  BSF    03.1
0D25:  MOVF   35,W
0D26:  MOVWF  6A
0D27:  MOVF   34,W
0D28:  MOVWF  69
0D29:  MOVF   33,W
0D2A:  MOVWF  68
0D2B:  MOVF   32,W
0D2C:  MOVWF  67
0D2D:  CLRF   6E
0D2E:  CLRF   6D
0D2F:  MOVLW  48
0D30:  MOVWF  6C
0D31:  MOVLW  83
0D32:  MOVWF  6B
0D33:  CALL   000
0D34:  MOVF   7A,W
0D35:  MOVWF  5A
0D36:  MOVF   79,W
0D37:  MOVWF  59
0D38:  MOVF   78,W
0D39:  MOVWF  58
0D3A:  MOVF   77,W
0D3B:  MOVWF  57
0D3C:  MOVLW  AC
0D3D:  MOVWF  6E
0D3E:  MOVLW  C5
0D3F:  MOVWF  6D
0D40:  MOVLW  27
0D41:  MOVWF  6C
0D42:  MOVLW  71
0D43:  MOVWF  6B
0D44:  MOVF   56,W
0D45:  MOVWF  72
0D46:  MOVF   55,W
0D47:  MOVWF  71
0D48:  MOVF   54,W
0D49:  MOVWF  70
0D4A:  MOVF   53,W
0D4B:  MOVWF  6F
0D4C:  BCF    0A.3
0D4D:  CALL   67B
0D4E:  BSF    0A.3
0D4F:  BCF    03.1
0D50:  MOVLW  0A
0D51:  MOVWF  6A
0D52:  MOVLW  D7
0D53:  MOVWF  69
0D54:  MOVLW  23
0D55:  MOVWF  68
0D56:  MOVLW  78
0D57:  MOVWF  67
0D58:  MOVF   7A,W
0D59:  MOVWF  6E
0D5A:  MOVF   79,W
0D5B:  MOVWF  6D
0D5C:  MOVF   78,W
0D5D:  MOVWF  6C
0D5E:  MOVF   77,W
0D5F:  MOVWF  6B
0D60:  CALL   000
0D61:  MOVF   5A,W
0D62:  MOVWF  6E
0D63:  MOVF   59,W
0D64:  MOVWF  6D
0D65:  MOVF   58,W
0D66:  MOVWF  6C
0D67:  MOVF   57,W
0D68:  MOVWF  6B
0D69:  MOVF   7A,W
0D6A:  MOVWF  72
0D6B:  MOVF   79,W
0D6C:  MOVWF  71
0D6D:  MOVF   78,W
0D6E:  MOVWF  70
0D6F:  MOVF   77,W
0D70:  MOVWF  6F
0D71:  BCF    0A.3
0D72:  CALL   67B
0D73:  BSF    0A.3
0D74:  MOVF   7A,W
0D75:  MOVWF  5A
0D76:  MOVF   79,W
0D77:  MOVWF  59
0D78:  MOVF   78,W
0D79:  MOVWF  58
0D7A:  MOVF   77,W
0D7B:  MOVWF  57
0D7C:  BCF    03.1
0D7D:  MOVF   7A,W
0D7E:  MOVWF  6A
0D7F:  MOVF   79,W
0D80:  MOVWF  69
0D81:  MOVF   78,W
0D82:  MOVWF  68
0D83:  MOVF   77,W
0D84:  MOVWF  67
0D85:  MOVF   46,W
0D86:  MOVWF  6E
0D87:  MOVF   45,W
0D88:  MOVWF  6D
0D89:  MOVF   44,W
0D8A:  MOVWF  6C
0D8B:  MOVF   43,W
0D8C:  MOVWF  6B
0D8D:  CALL   000
0D8E:  MOVF   7A,W
0D8F:  MOVWF  39
0D90:  MOVF   79,W
0D91:  MOVWF  38
0D92:  MOVF   78,W
0D93:  MOVWF  37
0D94:  MOVF   77,W
0D95:  MOVWF  36
.................... } 
....................  
....................  
.................... //***** Function to measure & calculate SHT75 temp & RH ***** 
....................  
.................... void sht_rd (float & temp, float & truehumid) 
.................... { 
....................  int16 restemp, reshumid; 
....................  float realhumid; 
....................  restemp = 0; truehumid = 0; 
*
0C05:  CLRF   40
0C06:  CLRF   3F
0C07:  CLRF   39
0C08:  CLRF   38
0C09:  CLRF   37
0C0A:  CLRF   36
....................  
....................  restemp = measuretemp();    //measure temp 
*
0C2A:  MOVF   79,W
0C2B:  MOVWF  40
0C2C:  MOVF   78,W
0C2D:  MOVWF  3F
....................  reshumid = measurehumid();  //measure RH 
*
0C4D:  MOVF   79,W
0C4E:  MOVWF  42
0C4F:  MOVF   78,W
0C50:  MOVWF  41
.................... calculate_data (restemp, reshumid, temp, realhumid, truehumid);  //calculate temp & RH 
0C51:  MOVF   40,W
0C52:  MOVWF  50
0C53:  MOVF   3F,W
0C54:  MOVWF  4F
0C55:  MOVF   42,W
0C56:  MOVWF  52
0C57:  MOVF   41,W
0C58:  MOVWF  51
.................... } 
....................  
....................  
.................... //***** Function to initialise SHT75 on power-up ***** 
....................  
.................... void sht_init (void) 
.................... { 
....................  comreset();    //reset SHT75 
....................  delay_ms(20);  //delay for power-up 
*
0297:  MOVLW  14
0298:  MOVWF  4D
0299:  CALL   0BF
029A:  BSF    0A.3
029B:  BCF    0A.4
029C:  GOTO   337 (RETURN)
.................... } 
....................  
....................  int16 i; 
....................  int dc=1, h=1; 
....................  #int_ext  
.................... void ext_isr(){ 
....................  
....................    clear_interrupt(INT_EXT); 
*
004F:  BCF    0B.1
....................    if(dc==0) output_low(pin_a4); 
0050:  MOVF   2E,F
0051:  BTFSS  03.2
0052:  GOTO   058
0053:  BSF    03.5
0054:  BCF    05.4
0055:  BCF    03.5
0056:  BCF    05.4
0057:  GOTO   05C
....................    else output_high(pin_a4); 
0058:  BSF    03.5
0059:  BCF    05.4
005A:  BCF    03.5
005B:  BSF    05.4
....................     
005C:  BCF    0B.1
005D:  BCF    0A.3
005E:  BCF    0A.4
005F:  GOTO   02B
.................... } 
....................  
.................... int press(){ 
....................             output_high(pin_b3); 
*
0331:  BSF    03.5
0332:  BCF    06.3
0333:  BCF    03.5
0334:  BSF    06.3
....................             output_high(pin_b2); 
0335:  BSF    03.5
0336:  BCF    06.2
0337:  BCF    03.5
0338:  BSF    06.2
....................             output_low(pin_b1); 
0339:  BSF    03.5
033A:  BCF    06.1
033B:  BCF    03.5
033C:  BCF    06.1
....................              
....................       if(!input_state(pin_b4))  return 1; 
033D:  BTFSC  06.4
033E:  GOTO   342
033F:  MOVLW  01
0340:  MOVWF  78
0341:  GOTO   390
....................       if(!input_state(pin_b5)) return 4; 
0342:  BTFSC  06.5
0343:  GOTO   347
0344:  MOVLW  04
0345:  MOVWF  78
0346:  GOTO   390
....................       if(!input_state(pin_b6))  return 7; 
0347:  BTFSC  06.6
0348:  GOTO   34C
0349:  MOVLW  07
034A:  MOVWF  78
034B:  GOTO   390
....................       if(!input_state(pin_b7))  return 77; 
034C:  BTFSC  06.7
034D:  GOTO   351
034E:  MOVLW  4D
034F:  MOVWF  78
0350:  GOTO   390
....................    
....................             output_high(pin_b3); 
0351:  BSF    03.5
0352:  BCF    06.3
0353:  BCF    03.5
0354:  BSF    06.3
....................             output_low(pin_b2); 
0355:  BSF    03.5
0356:  BCF    06.2
0357:  BCF    03.5
0358:  BCF    06.2
....................             output_high(pin_b1); 
0359:  BSF    03.5
035A:  BCF    06.1
035B:  BCF    03.5
035C:  BSF    06.1
....................       if(!input_state(pin_b4))  return 2; 
035D:  BTFSC  06.4
035E:  GOTO   362
035F:  MOVLW  02
0360:  MOVWF  78
0361:  GOTO   390
....................       if(!input_state(pin_b5))  return 5; 
0362:  BTFSC  06.5
0363:  GOTO   367
0364:  MOVLW  05
0365:  MOVWF  78
0366:  GOTO   390
....................       if(!input_state(pin_b6))  return 8; 
0367:  BTFSC  06.6
0368:  GOTO   36C
0369:  MOVLW  08
036A:  MOVWF  78
036B:  GOTO   390
....................       if(!input_state(pin_b7))  return 0; 
036C:  BTFSC  06.7
036D:  GOTO   371
036E:  MOVLW  00
036F:  MOVWF  78
0370:  GOTO   390
....................    
....................             output_low(pin_b3); 
0371:  BSF    03.5
0372:  BCF    06.3
0373:  BCF    03.5
0374:  BCF    06.3
....................             output_high(pin_b2); 
0375:  BSF    03.5
0376:  BCF    06.2
0377:  BCF    03.5
0378:  BSF    06.2
....................             output_high(pin_b1); 
0379:  BSF    03.5
037A:  BCF    06.1
037B:  BCF    03.5
037C:  BSF    06.1
....................       if(!input_state(pin_b4))  return 3; 
037D:  BTFSC  06.4
037E:  GOTO   382
037F:  MOVLW  03
0380:  MOVWF  78
0381:  GOTO   390
....................       if(!input_state(pin_b5))  return 6; 
0382:  BTFSC  06.5
0383:  GOTO   387
0384:  MOVLW  06
0385:  MOVWF  78
0386:  GOTO   390
....................       if(!input_state(pin_b6))  return 9; 
0387:  BTFSC  06.6
0388:  GOTO   38C
0389:  MOVLW  09
038A:  MOVWF  78
038B:  GOTO   390
....................       if(!input_state(pin_b7))  return 99; 
038C:  BTFSC  06.7
038D:  GOTO   390
038E:  MOVLW  63
038F:  MOVWF  78
0390:  BSF    0A.3
0391:  BCF    0A.4
0392:  GOTO   388 (RETURN)
....................     
....................    } 
....................  
....................  
.................... void adcr(){         i=read_adc(); 
*
044D:  BSF    1F.2
044E:  BTFSC  1F.2
044F:  GOTO   44E
0450:  BSF    03.5
0451:  MOVF   1E,W
0452:  BCF    03.5
0453:  MOVWF  2C
0454:  MOVF   1E,W
0455:  MOVWF  2D
....................                      lcd_putc('\f'); 
0456:  MOVLW  0C
0457:  MOVWF  4C
0458:  CALL   2AF
....................                      lcd_gotoxy(1,1); 
0459:  MOVLW  01
045A:  MOVWF  4D
045B:  MOVWF  4E
045C:  CALL   29D
....................                  
....................                      i=i/2;  
045D:  BCF    03.0
045E:  RRF    2D,F
045F:  RRF    2C,F
....................                      if(i>100) {i-=3;printf(lcd_putc, "Room1:%3lu %cC", i,223);} 
0460:  MOVF   2D,F
0461:  BTFSS  03.2
0462:  GOTO   467
0463:  MOVF   2C,W
0464:  SUBLW  64
0465:  BTFSC  03.0
0466:  GOTO   488
0467:  MOVLW  03
0468:  SUBWF  2C,F
0469:  MOVLW  00
046A:  BTFSS  03.0
046B:  MOVLW  01
046C:  SUBWF  2D,F
046D:  MOVLW  60
046E:  BSF    03.6
046F:  MOVWF  0D
0470:  MOVLW  00
0471:  MOVWF  0F
0472:  BCF    03.0
0473:  MOVLW  06
0474:  BCF    03.6
0475:  MOVWF  3F
0476:  CALL   393
0477:  MOVLW  02
0478:  MOVWF  04
0479:  MOVF   2D,W
047A:  MOVWF  40
047B:  MOVF   2C,W
047C:  MOVWF  3F
047D:  CALL   3EA
047E:  MOVLW  20
047F:  MOVWF  4C
0480:  CALL   2AF
0481:  MOVLW  DF
0482:  MOVWF  4C
0483:  CALL   2AF
0484:  MOVLW  43
0485:  MOVWF  4C
0486:  CALL   2AF
0487:  GOTO   4F2
....................                      else if(i>70){i-=2;printf(lcd_putc, "Room1:%2lu %cC", i,223);} 
0488:  MOVF   2D,F
0489:  BTFSS  03.2
048A:  GOTO   48F
048B:  MOVF   2C,W
048C:  SUBLW  46
048D:  BTFSC  03.0
048E:  GOTO   4B0
048F:  MOVLW  02
0490:  SUBWF  2C,F
0491:  MOVLW  00
0492:  BTFSS  03.0
0493:  MOVLW  01
0494:  SUBWF  2D,F
0495:  MOVLW  68
0496:  BSF    03.6
0497:  MOVWF  0D
0498:  MOVLW  00
0499:  MOVWF  0F
049A:  BCF    03.0
049B:  MOVLW  06
049C:  BCF    03.6
049D:  MOVWF  3F
049E:  CALL   393
049F:  MOVLW  03
04A0:  MOVWF  04
04A1:  MOVF   2D,W
04A2:  MOVWF  40
04A3:  MOVF   2C,W
04A4:  MOVWF  3F
04A5:  CALL   3EA
04A6:  MOVLW  20
04A7:  MOVWF  4C
04A8:  CALL   2AF
04A9:  MOVLW  DF
04AA:  MOVWF  4C
04AB:  CALL   2AF
04AC:  MOVLW  43
04AD:  MOVWF  4C
04AE:  CALL   2AF
04AF:  GOTO   4F2
....................                      else if(i>25){ i-=1;printf(lcd_putc, "Room1:%2lu %cC", i,223);} 
04B0:  MOVF   2D,F
04B1:  BTFSS  03.2
04B2:  GOTO   4B7
04B3:  MOVF   2C,W
04B4:  SUBLW  19
04B5:  BTFSC  03.0
04B6:  GOTO   4D8
04B7:  MOVLW  01
04B8:  SUBWF  2C,F
04B9:  MOVLW  00
04BA:  BTFSS  03.0
04BB:  MOVLW  01
04BC:  SUBWF  2D,F
04BD:  MOVLW  70
04BE:  BSF    03.6
04BF:  MOVWF  0D
04C0:  MOVLW  00
04C1:  MOVWF  0F
04C2:  BCF    03.0
04C3:  MOVLW  06
04C4:  BCF    03.6
04C5:  MOVWF  3F
04C6:  CALL   393
04C7:  MOVLW  03
04C8:  MOVWF  04
04C9:  MOVF   2D,W
04CA:  MOVWF  40
04CB:  MOVF   2C,W
04CC:  MOVWF  3F
04CD:  CALL   3EA
04CE:  MOVLW  20
04CF:  MOVWF  4C
04D0:  CALL   2AF
04D1:  MOVLW  DF
04D2:  MOVWF  4C
04D3:  CALL   2AF
04D4:  MOVLW  43
04D5:  MOVWF  4C
04D6:  CALL   2AF
04D7:  GOTO   4F2
....................                      else printf(lcd_putc, "Room1:%2lu %cC", i,223); 
04D8:  MOVLW  78
04D9:  BSF    03.6
04DA:  MOVWF  0D
04DB:  MOVLW  00
04DC:  MOVWF  0F
04DD:  BCF    03.0
04DE:  MOVLW  06
04DF:  BCF    03.6
04E0:  MOVWF  3F
04E1:  CALL   393
04E2:  MOVLW  03
04E3:  MOVWF  04
04E4:  MOVF   2D,W
04E5:  MOVWF  40
04E6:  MOVF   2C,W
04E7:  MOVWF  3F
04E8:  CALL   3EA
04E9:  MOVLW  20
04EA:  MOVWF  4C
04EB:  CALL   2AF
04EC:  MOVLW  DF
04ED:  MOVWF  4C
04EE:  CALL   2AF
04EF:  MOVLW  43
04F0:  MOVWF  4C
04F1:  CALL   2AF
....................                       
....................                      if(i<25){lcd_gotoxy(1,2); 
04F2:  MOVF   2D,F
04F3:  BTFSS  03.2
04F4:  GOTO   51B
04F5:  MOVF   2C,W
04F6:  SUBLW  18
04F7:  BTFSS  03.0
04F8:  GOTO   51B
04F9:  MOVLW  01
04FA:  MOVWF  4D
04FB:  MOVLW  02
04FC:  MOVWF  4E
04FD:  CALL   29D
....................                               lcd_putc("it's cold"); 
04FE:  MOVLW  80
04FF:  BSF    03.6
0500:  MOVWF  0D
0501:  MOVLW  00
0502:  MOVWF  0F
0503:  BCF    03.6
0504:  CALL   2DB
....................                               output_high(pin_d0); 
0505:  BSF    03.5
0506:  BCF    08.0
0507:  BCF    03.5
0508:  BSF    08.0
....................                               output_low(pin_c7); 
0509:  BCF    2B.7
050A:  MOVF   2B,W
050B:  BSF    03.5
050C:  MOVWF  07
050D:  BCF    03.5
050E:  BCF    07.7
....................                               output_low(pin_c6); 
050F:  BCF    2B.6
0510:  MOVF   2B,W
0511:  BSF    03.5
0512:  MOVWF  07
0513:  BCF    03.5
0514:  BCF    07.6
....................                               output_low(pin_d1);  dc=1;}; 
0515:  BSF    03.5
0516:  BCF    08.1
0517:  BCF    03.5
0518:  BCF    08.1
0519:  MOVLW  01
051A:  MOVWF  2E
....................                      if(i>=25 && i<=40){lcd_gotoxy(1,2); 
051B:  MOVF   2D,F
051C:  BTFSS  03.2
051D:  GOTO   522
051E:  MOVF   2C,W
051F:  SUBLW  18
0520:  BTFSC  03.0
0521:  GOTO   54B
0522:  MOVF   2D,F
0523:  BTFSS  03.2
0524:  GOTO   54B
0525:  MOVF   2C,W
0526:  SUBLW  28
0527:  BTFSS  03.0
0528:  GOTO   54B
0529:  MOVLW  01
052A:  MOVWF  4D
052B:  MOVLW  02
052C:  MOVWF  4E
052D:  CALL   29D
....................                                         lcd_putc("it's normal"); 
052E:  MOVLW  85
052F:  BSF    03.6
0530:  MOVWF  0D
0531:  MOVLW  00
0532:  MOVWF  0F
0533:  BCF    03.6
0534:  CALL   2DB
....................                                         output_high(pin_c6); 
0535:  BCF    2B.6
0536:  MOVF   2B,W
0537:  BSF    03.5
0538:  MOVWF  07
0539:  BCF    03.5
053A:  BSF    07.6
....................                                         output_low(pin_c7); 
053B:  BCF    2B.7
053C:  MOVF   2B,W
053D:  BSF    03.5
053E:  MOVWF  07
053F:  BCF    03.5
0540:  BCF    07.7
....................                                         output_low(pin_d0); 
0541:  BSF    03.5
0542:  BCF    08.0
0543:  BCF    03.5
0544:  BCF    08.0
....................                                          output_low(pin_d1);   dc=1;}; 
0545:  BSF    03.5
0546:  BCF    08.1
0547:  BCF    03.5
0548:  BCF    08.1
0549:  MOVLW  01
054A:  MOVWF  2E
....................                      if(i>40){lcd_gotoxy(1,2); 
054B:  MOVF   2D,F
054C:  BTFSS  03.2
054D:  GOTO   552
054E:  MOVF   2C,W
054F:  SUBLW  28
0550:  BTFSC  03.0
0551:  GOTO   573
0552:  MOVLW  01
0553:  MOVWF  4D
0554:  MOVLW  02
0555:  MOVWF  4E
0556:  CALL   29D
....................                               lcd_putc("it's hot"); 
0557:  MOVLW  8B
0558:  BSF    03.6
0559:  MOVWF  0D
055A:  MOVLW  00
055B:  MOVWF  0F
055C:  BCF    03.6
055D:  CALL   2DB
....................                               output_high(pin_c7); 
055E:  BCF    2B.7
055F:  MOVF   2B,W
0560:  BSF    03.5
0561:  MOVWF  07
0562:  BCF    03.5
0563:  BSF    07.7
....................                               output_low(pin_c6); 
0564:  BCF    2B.6
0565:  MOVF   2B,W
0566:  BSF    03.5
0567:  MOVWF  07
0568:  BCF    03.5
0569:  BCF    07.6
....................                               output_low(pin_d0); 
056A:  BSF    03.5
056B:  BCF    08.0
056C:  BCF    03.5
056D:  BCF    08.0
....................                                output_low(pin_d1);   dc=0;}; 
056E:  BSF    03.5
056F:  BCF    08.1
0570:  BCF    03.5
0571:  BCF    08.1
0572:  CLRF   2E
0573:  RETURN
....................                      } 
....................  
.................... void main(){ 
*
0AFB:  MOVF   03,W
0AFC:  ANDLW  1F
0AFD:  MOVWF  03
0AFE:  MOVLW  FF
0AFF:  MOVWF  2B
0B00:  MOVLW  01
0B01:  MOVWF  2E
0B02:  MOVWF  2F
0B03:  CLRF   31
0B04:  CLRF   30
0B05:  BSF    03.5
0B06:  BSF    1F.0
0B07:  BSF    1F.1
0B08:  BSF    1F.2
0B09:  BCF    1F.3
0B0A:  MOVLW  07
0B0B:  MOVWF  1C
0B0C:  BCF    03.7
....................       float r,t; 
....................      float op; 
....................       int x; 
....................   ext_int_edge(H_TO_L); 
0B0D:  BCF    01.6
....................   clear_interrupt(INT_EXT);  
0B0E:  BCF    03.5
0B0F:  BCF    0B.1
....................   enable_interrupts(INT_EXT);   
0B10:  BSF    0B.4
....................   enable_interrupts(GLOBAL); 
0B11:  MOVLW  C0
0B12:  IORWF  0B,F
....................   
....................       set_tris_b(0xF1); 
0B13:  MOVLW  F1
0B14:  BSF    03.5
0B15:  MOVWF  06
....................       set_tris_a(0x0f); 
0B16:  MOVLW  0F
0B17:  MOVWF  05
....................       set_tris_e(0x04);   
0B18:  BCF    09.0
0B19:  BCF    09.1
0B1A:  BSF    09.2
....................       output_a(0xf0); 
0B1B:  CLRF   05
0B1C:  MOVLW  F0
0B1D:  BCF    03.5
0B1E:  MOVWF  05
....................       output_e(0x00); 
0B1F:  BSF    03.5
0B20:  BCF    09.0
0B21:  BCF    09.1
0B22:  BCF    09.2
0B23:  BCF    03.5
0B24:  CLRF   09
....................       set_tris_c(0x00); 
0B25:  MOVLW  00
0B26:  BSF    03.5
0B27:  MOVWF  07
0B28:  BCF    03.5
0B29:  MOVWF  2B
....................       set_tris_d(0x00); 
0B2A:  BSF    03.5
0B2B:  MOVWF  08
....................       output_d(0x00); 
0B2C:  CLRF   08
0B2D:  BCF    03.5
0B2E:  CLRF   08
....................       port_b_pullups(true); 
0B2F:  BSF    03.5
0B30:  BCF    01.7
....................       lcd_init(); 
0B31:  BCF    0A.3
0B32:  BCF    03.5
0B33:  GOTO   1D2
0B34:  BSF    0A.3
....................       sht_init(); 
0B35:  BCF    0A.3
0B36:  GOTO   274
0B37:  BSF    0A.3
....................    
....................   setup_adc(ADC_CLOCK_DIV_32); 
0B38:  BSF    03.5
0B39:  BCF    1F.6
0B3A:  BCF    03.5
0B3B:  BCF    1F.6
0B3C:  BSF    1F.7
0B3D:  BSF    03.5
0B3E:  BSF    1F.7
0B3F:  BCF    03.5
0B40:  BSF    1F.0
....................   setup_adc_ports(AN0); 
0B41:  BSF    03.5
0B42:  BCF    1F.0
0B43:  BSF    1F.1
0B44:  BSF    1F.2
0B45:  BSF    1F.3
....................    
....................   lcd_gotoxy(1,1); 
0B46:  MOVLW  01
0B47:  BCF    03.5
0B48:  MOVWF  4D
0B49:  MOVWF  4E
0B4A:  BCF    0A.3
0B4B:  CALL   29D
0B4C:  BSF    0A.3
....................   lcd_putc("Room1: "); 
0B4D:  MOVLW  90
0B4E:  BSF    03.6
0B4F:  MOVWF  0D
0B50:  MOVLW  00
0B51:  MOVWF  0F
0B52:  BCF    0A.3
0B53:  BCF    03.6
0B54:  CALL   2DB
0B55:  BSF    0A.3
....................  
....................      lcd_gotoxy(10,1); 
0B56:  MOVLW  0A
0B57:  MOVWF  4D
0B58:  MOVLW  01
0B59:  MOVWF  4E
0B5A:  BCF    0A.3
0B5B:  CALL   29D
0B5C:  BSF    0A.3
....................   lcd_putc("Room2: "); 
0B5D:  MOVLW  94
0B5E:  BSF    03.6
0B5F:  MOVWF  0D
0B60:  MOVLW  00
0B61:  MOVWF  0F
0B62:  BCF    0A.3
0B63:  BCF    03.6
0B64:  CALL   2DB
0B65:  BSF    0A.3
....................  
....................   lcd_gotoxy(1,2); 
0B66:  MOVLW  01
0B67:  MOVWF  4D
0B68:  MOVLW  02
0B69:  MOVWF  4E
0B6A:  BCF    0A.3
0B6B:  CALL   29D
0B6C:  BSF    0A.3
....................   lcd_putc("Room3: "); 
0B6D:  MOVLW  98
0B6E:  BSF    03.6
0B6F:  MOVWF  0D
0B70:  MOVLW  00
0B71:  MOVWF  0F
0B72:  BCF    0A.3
0B73:  BCF    03.6
0B74:  CALL   2DB
0B75:  BSF    0A.3
....................  
....................   lcd_gotoxy(10,2); 
0B76:  MOVLW  0A
0B77:  MOVWF  4D
0B78:  MOVLW  02
0B79:  MOVWF  4E
0B7A:  BCF    0A.3
0B7B:  CALL   29D
0B7C:  BSF    0A.3
....................   lcd_putc("Room4: "); 
0B7D:  MOVLW  9C
0B7E:  BSF    03.6
0B7F:  MOVWF  0D
0B80:  MOVLW  00
0B81:  MOVWF  0F
0B82:  BCF    0A.3
0B83:  BCF    03.6
0B84:  CALL   2DB
0B85:  BSF    0A.3
.................... while(TRUE) 
....................        { 
....................         
....................        
....................         
....................            x= press(); 
0B86:  BCF    0A.3
0B87:  GOTO   331
0B88:  BSF    0A.3
0B89:  MOVF   78,W
0B8A:  MOVWF  3E
....................            if(x==1){ set_adc_channel(0); 
0B8B:  DECFSZ 3E,W
0B8C:  GOTO   3A6
0B8D:  MOVLW  00
0B8E:  MOVWF  78
0B8F:  MOVF   1F,W
0B90:  ANDLW  C7
0B91:  IORWF  78,W
0B92:  MOVWF  1F
....................                      adcr(); 
0B93:  BCF    0A.3
0B94:  CALL   44D
0B95:  BSF    0A.3
....................                      output_high(pin_d2);  
0B96:  BSF    03.5
0B97:  BCF    08.2
0B98:  BCF    03.5
0B99:  BSF    08.2
....................                      output_low(pin_d3);  
0B9A:  BSF    03.5
0B9B:  BCF    08.3
0B9C:  BCF    03.5
0B9D:  BCF    08.3
....................                      output_low(pin_d4);  
0B9E:  BSF    03.5
0B9F:  BCF    08.4
0BA0:  BCF    03.5
0BA1:  BCF    08.4
....................                      output_low(pin_d5); 
0BA2:  BSF    03.5
0BA3:  BCF    08.5
0BA4:  BCF    03.5
0BA5:  BCF    08.5
....................                     } 
....................             
....................             if(x==2){ 
0BA6:  MOVF   3E,W
0BA7:  SUBLW  02
0BA8:  BTFSS  03.2
0BA9:  GOTO   3C3
....................                      set_adc_channel(1); 
0BAA:  MOVLW  08
0BAB:  MOVWF  78
0BAC:  MOVF   1F,W
0BAD:  ANDLW  C7
0BAE:  IORWF  78,W
0BAF:  MOVWF  1F
....................                      adcr(); 
0BB0:  BCF    0A.3
0BB1:  CALL   44D
0BB2:  BSF    0A.3
....................                       
....................                      output_low(pin_d2);  
0BB3:  BSF    03.5
0BB4:  BCF    08.2
0BB5:  BCF    03.5
0BB6:  BCF    08.2
....................                      output_high(pin_d3);  
0BB7:  BSF    03.5
0BB8:  BCF    08.3
0BB9:  BCF    03.5
0BBA:  BSF    08.3
....................                      output_low(pin_d4);  
0BBB:  BSF    03.5
0BBC:  BCF    08.4
0BBD:  BCF    03.5
0BBE:  BCF    08.4
....................                      output_low(pin_d5);} 
0BBF:  BSF    03.5
0BC0:  BCF    08.5
0BC1:  BCF    03.5
0BC2:  BCF    08.5
....................              
....................              if(x==3){set_adc_channel(2); 
0BC3:  MOVF   3E,W
0BC4:  SUBLW  03
0BC5:  BTFSS  03.2
0BC6:  GOTO   3E0
0BC7:  MOVLW  10
0BC8:  MOVWF  78
0BC9:  MOVF   1F,W
0BCA:  ANDLW  C7
0BCB:  IORWF  78,W
0BCC:  MOVWF  1F
....................                       
....................                      adcr(); 
0BCD:  BCF    0A.3
0BCE:  CALL   44D
0BCF:  BSF    0A.3
....................                      output_high(pin_d2);  
0BD0:  BSF    03.5
0BD1:  BCF    08.2
0BD2:  BCF    03.5
0BD3:  BSF    08.2
....................                      output_high(pin_d3);  
0BD4:  BSF    03.5
0BD5:  BCF    08.3
0BD6:  BCF    03.5
0BD7:  BSF    08.3
....................                      output_low(pin_d4);  
0BD8:  BSF    03.5
0BD9:  BCF    08.4
0BDA:  BCF    03.5
0BDB:  BCF    08.4
....................                      output_low(pin_d5);} 
0BDC:  BSF    03.5
0BDD:  BCF    08.5
0BDE:  BCF    03.5
0BDF:  BCF    08.5
....................               
....................               if(x==4){set_adc_channel(3); 
0BE0:  MOVF   3E,W
0BE1:  SUBLW  04
0BE2:  BTFSS  03.2
0BE3:  GOTO   3FD
0BE4:  MOVLW  18
0BE5:  MOVWF  78
0BE6:  MOVF   1F,W
0BE7:  ANDLW  C7
0BE8:  IORWF  78,W
0BE9:  MOVWF  1F
....................                      adcr(); 
0BEA:  BCF    0A.3
0BEB:  CALL   44D
0BEC:  BSF    0A.3
....................                      output_low(pin_d2);  
0BED:  BSF    03.5
0BEE:  BCF    08.2
0BEF:  BCF    03.5
0BF0:  BCF    08.2
....................                      output_low(pin_d3);  
0BF1:  BSF    03.5
0BF2:  BCF    08.3
0BF3:  BCF    03.5
0BF4:  BCF    08.3
....................                      output_high(pin_d4);  
0BF5:  BSF    03.5
0BF6:  BCF    08.4
0BF7:  BCF    03.5
0BF8:  BSF    08.4
....................                      output_low(pin_d5);} 
0BF9:  BSF    03.5
0BFA:  BCF    08.5
0BFB:  BCF    03.5
0BFC:  BCF    08.5
....................                
....................                if(x==5){} 
0BFD:  MOVF   3E,W
0BFE:  SUBLW  05
0BFF:  BTFSS  03.2
0C00:  GOTO   401
....................                 
....................                 if(x==6){ 
0C01:  MOVF   3E,W
0C02:  SUBLW  06
0C03:  BTFSS  03.2
0C04:  GOTO   626
....................                          sht_rd(r,t); 
....................                          lcd_putc('\f'); 
*
0D96:  MOVLW  0C
0D97:  MOVWF  4C
0D98:  BCF    0A.3
0D99:  CALL   2AF
0D9A:  BSF    0A.3
....................                          lcd_gotoxy(1,1); 
0D9B:  MOVLW  01
0D9C:  MOVWF  4D
0D9D:  MOVWF  4E
0D9E:  BCF    0A.3
0D9F:  CALL   29D
0DA0:  BSF    0A.3
....................                          if(t<40) h=0; 
0DA1:  MOVF   39,W
0DA2:  MOVWF  42
0DA3:  MOVF   38,W
0DA4:  MOVWF  41
0DA5:  MOVF   37,W
0DA6:  MOVWF  40
0DA7:  MOVF   36,W
0DA8:  MOVWF  3F
0DA9:  CLRF   46
0DAA:  CLRF   45
0DAB:  MOVLW  20
0DAC:  MOVWF  44
0DAD:  MOVLW  84
0DAE:  MOVWF  43
0DAF:  BCF    0A.3
0DB0:  CALL   70E
0DB1:  BSF    0A.3
0DB2:  BTFSC  03.0
0DB3:  CLRF   2F
....................                          // printf(lcd_putc, "Temp : %3.1f %cC   ", r, 223); 
....................                           printf(lcd_putc, "RH   : %3.1f %%   ", t); 
0DB4:  MOVLW  A0
0DB5:  BSF    03.6
0DB6:  MOVWF  0D
0DB7:  MOVLW  00
0DB8:  MOVWF  0F
0DB9:  BCF    03.0
0DBA:  MOVLW  07
0DBB:  BCF    03.6
0DBC:  MOVWF  3F
0DBD:  BCF    0A.3
0DBE:  CALL   393
0DBF:  BSF    0A.3
0DC0:  MOVLW  02
0DC1:  MOVWF  04
0DC2:  MOVF   39,W
0DC3:  MOVWF  42
0DC4:  MOVF   38,W
0DC5:  MOVWF  41
0DC6:  MOVF   37,W
0DC7:  MOVWF  40
0DC8:  MOVF   36,W
0DC9:  MOVWF  3F
0DCA:  MOVLW  01
0DCB:  MOVWF  43
0DCC:  CALL   141
0DCD:  MOVLW  20
0DCE:  MOVWF  4C
0DCF:  BCF    0A.3
0DD0:  CALL   2AF
0DD1:  BSF    0A.3
0DD2:  MOVLW  25
0DD3:  MOVWF  4C
0DD4:  BCF    0A.3
0DD5:  CALL   2AF
0DD6:  BSF    0A.3
0DD7:  MOVLW  20
0DD8:  MOVWF  4C
0DD9:  BCF    0A.3
0DDA:  CALL   2AF
0DDB:  BSF    0A.3
0DDC:  MOVLW  20
0DDD:  MOVWF  4C
0DDE:  BCF    0A.3
0DDF:  CALL   2AF
0DE0:  BSF    0A.3
0DE1:  MOVLW  20
0DE2:  MOVWF  4C
0DE3:  BCF    0A.3
0DE4:  CALL   2AF
0DE5:  BSF    0A.3
....................                        if(t<40){lcd_gotoxy(1,2); 
0DE6:  MOVF   39,W
0DE7:  MOVWF  42
0DE8:  MOVF   38,W
0DE9:  MOVWF  41
0DEA:  MOVF   37,W
0DEB:  MOVWF  40
0DEC:  MOVF   36,W
0DED:  MOVWF  3F
0DEE:  CLRF   46
0DEF:  CLRF   45
0DF0:  MOVLW  20
0DF1:  MOVWF  44
0DF2:  MOVLW  84
0DF3:  MOVWF  43
0DF4:  BCF    0A.3
0DF5:  CALL   70E
0DF6:  BSF    0A.3
0DF7:  BTFSS  03.0
0DF8:  GOTO   61D
0DF9:  MOVLW  01
0DFA:  MOVWF  4D
0DFB:  MOVLW  02
0DFC:  MOVWF  4E
0DFD:  BCF    0A.3
0DFE:  CALL   29D
0DFF:  BSF    0A.3
....................                               lcd_putc("it's low"); 
0E00:  MOVLW  AA
0E01:  BSF    03.6
0E02:  MOVWF  0D
0E03:  MOVLW  00
0E04:  MOVWF  0F
0E05:  BCF    0A.3
0E06:  BCF    03.6
0E07:  CALL   2DB
0E08:  BSF    0A.3
....................                               output_high(pin_d1); 
0E09:  BSF    03.5
0E0A:  BCF    08.1
0E0B:  BCF    03.5
0E0C:  BSF    08.1
....................                               output_low(pin_d0); 
0E0D:  BSF    03.5
0E0E:  BCF    08.0
0E0F:  BCF    03.5
0E10:  BCF    08.0
....................                               output_low(pin_c7); 
0E11:  BCF    2B.7
0E12:  MOVF   2B,W
0E13:  BSF    03.5
0E14:  MOVWF  07
0E15:  BCF    03.5
0E16:  BCF    07.7
....................                               output_low(pin_c6);}                              
0E17:  BCF    2B.6
0E18:  MOVF   2B,W
0E19:  BSF    03.5
0E1A:  MOVWF  07
0E1B:  BCF    03.5
0E1C:  BCF    07.6
....................                               delay_ms(500); } 
0E1D:  MOVLW  02
0E1E:  MOVWF  3F
0E1F:  MOVLW  FA
0E20:  MOVWF  4D
0E21:  BCF    0A.3
0E22:  CALL   0BF
0E23:  BSF    0A.3
0E24:  DECFSZ 3F,F
0E25:  GOTO   61F
....................                  
....................                   if(x==7){ set_adc_channel(7); 
0E26:  MOVF   3E,W
0E27:  SUBLW  07
0E28:  BTFSS  03.2
0E29:  GOTO   6EE
0E2A:  MOVLW  38
0E2B:  MOVWF  78
0E2C:  MOVF   1F,W
0E2D:  ANDLW  C7
0E2E:  IORWF  78,W
0E2F:  MOVWF  1F
....................                             op=read_adc(); 
0E30:  BSF    1F.2
0E31:  BTFSC  1F.2
0E32:  GOTO   631
0E33:  MOVF   1E,W
0E34:  MOVWF  7A
0E35:  BSF    03.5
0E36:  MOVF   1E,W
0E37:  BCF    03.5
0E38:  MOVWF  63
0E39:  MOVF   1E,W
0E3A:  MOVWF  64
0E3B:  BCF    0A.3
0E3C:  CALL   65E
0E3D:  BSF    0A.3
0E3E:  MOVF   7A,W
0E3F:  MOVWF  3D
0E40:  MOVF   79,W
0E41:  MOVWF  3C
0E42:  MOVF   78,W
0E43:  MOVWF  3B
0E44:  MOVF   77,W
0E45:  MOVWF  3A
....................                            op=op*17.5/10; 
0E46:  MOVF   3D,W
0E47:  MOVWF  6E
0E48:  MOVF   3C,W
0E49:  MOVWF  6D
0E4A:  MOVF   3B,W
0E4B:  MOVWF  6C
0E4C:  MOVF   3A,W
0E4D:  MOVWF  6B
0E4E:  CLRF   72
0E4F:  CLRF   71
0E50:  MOVLW  0C
0E51:  MOVWF  70
0E52:  MOVLW  83
0E53:  MOVWF  6F
0E54:  BCF    0A.3
0E55:  CALL   67B
0E56:  BSF    0A.3
0E57:  MOVF   7A,W
0E58:  MOVWF  42
0E59:  MOVF   79,W
0E5A:  MOVWF  41
0E5B:  MOVF   78,W
0E5C:  MOVWF  40
0E5D:  MOVF   77,W
0E5E:  MOVWF  3F
0E5F:  MOVF   7A,W
0E60:  MOVWF  46
0E61:  MOVF   79,W
0E62:  MOVWF  45
0E63:  MOVF   78,W
0E64:  MOVWF  44
0E65:  MOVF   77,W
0E66:  MOVWF  43
0E67:  CLRF   4A
0E68:  CLRF   49
0E69:  MOVLW  20
0E6A:  MOVWF  48
0E6B:  MOVLW  82
0E6C:  MOVWF  47
0E6D:  GOTO   22F
0E6E:  MOVF   7A,W
0E6F:  MOVWF  3D
0E70:  MOVF   79,W
0E71:  MOVWF  3C
0E72:  MOVF   78,W
0E73:  MOVWF  3B
0E74:  MOVF   77,W
0E75:  MOVWF  3A
....................                            lcd_putc('\f'); 
0E76:  MOVLW  0C
0E77:  MOVWF  4C
0E78:  BCF    0A.3
0E79:  CALL   2AF
0E7A:  BSF    0A.3
....................                             lcd_gotoxy(1,1); 
0E7B:  MOVLW  01
0E7C:  MOVWF  4D
0E7D:  MOVWF  4E
0E7E:  BCF    0A.3
0E7F:  CALL   29D
0E80:  BSF    0A.3
....................                            if (op<60){op-=5;lcd_putc("Dark");} 
0E81:  MOVF   3D,W
0E82:  MOVWF  42
0E83:  MOVF   3C,W
0E84:  MOVWF  41
0E85:  MOVF   3B,W
0E86:  MOVWF  40
0E87:  MOVF   3A,W
0E88:  MOVWF  3F
0E89:  CLRF   46
0E8A:  CLRF   45
0E8B:  MOVLW  70
0E8C:  MOVWF  44
0E8D:  MOVLW  84
0E8E:  MOVWF  43
0E8F:  BCF    0A.3
0E90:  CALL   70E
0E91:  BSF    0A.3
0E92:  BTFSS  03.0
0E93:  GOTO   6B6
0E94:  BSF    03.1
0E95:  MOVF   3D,W
0E96:  MOVWF  6A
0E97:  MOVF   3C,W
0E98:  MOVWF  69
0E99:  MOVF   3B,W
0E9A:  MOVWF  68
0E9B:  MOVF   3A,W
0E9C:  MOVWF  67
0E9D:  CLRF   6E
0E9E:  CLRF   6D
0E9F:  MOVLW  20
0EA0:  MOVWF  6C
0EA1:  MOVLW  81
0EA2:  MOVWF  6B
0EA3:  CALL   000
0EA4:  MOVF   7A,W
0EA5:  MOVWF  3D
0EA6:  MOVF   79,W
0EA7:  MOVWF  3C
0EA8:  MOVF   78,W
0EA9:  MOVWF  3B
0EAA:  MOVF   77,W
0EAB:  MOVWF  3A
0EAC:  MOVLW  AF
0EAD:  BSF    03.6
0EAE:  MOVWF  0D
0EAF:  MOVLW  00
0EB0:  MOVWF  0F
0EB1:  BCF    0A.3
0EB2:  BCF    03.6
0EB3:  CALL   2DB
0EB4:  BSF    0A.3
0EB5:  GOTO   6BF
....................                            else lcd_putc("Sunny"); 
0EB6:  MOVLW  B2
0EB7:  BSF    03.6
0EB8:  MOVWF  0D
0EB9:  MOVLW  00
0EBA:  MOVWF  0F
0EBB:  BCF    0A.3
0EBC:  BCF    03.6
0EBD:  CALL   2DB
0EBE:  BSF    0A.3
....................                            
....................                             lcd_gotoxy(1,2); 
0EBF:  MOVLW  01
0EC0:  MOVWF  4D
0EC1:  MOVLW  02
0EC2:  MOVWF  4E
0EC3:  BCF    0A.3
0EC4:  CALL   29D
0EC5:  BSF    0A.3
....................                             printf(lcd_putc, "opacity :%3.1f  %%",op);} 
0EC6:  MOVLW  B5
0EC7:  BSF    03.6
0EC8:  MOVWF  0D
0EC9:  MOVLW  00
0ECA:  MOVWF  0F
0ECB:  BCF    03.0
0ECC:  MOVLW  09
0ECD:  BCF    03.6
0ECE:  MOVWF  3F
0ECF:  BCF    0A.3
0ED0:  CALL   393
0ED1:  BSF    0A.3
0ED2:  MOVLW  02
0ED3:  MOVWF  04
0ED4:  MOVF   3D,W
0ED5:  MOVWF  42
0ED6:  MOVF   3C,W
0ED7:  MOVWF  41
0ED8:  MOVF   3B,W
0ED9:  MOVWF  40
0EDA:  MOVF   3A,W
0EDB:  MOVWF  3F
0EDC:  MOVLW  01
0EDD:  MOVWF  43
0EDE:  CALL   141
0EDF:  MOVLW  20
0EE0:  MOVWF  4C
0EE1:  BCF    0A.3
0EE2:  CALL   2AF
0EE3:  BSF    0A.3
0EE4:  MOVLW  20
0EE5:  MOVWF  4C
0EE6:  BCF    0A.3
0EE7:  CALL   2AF
0EE8:  BSF    0A.3
0EE9:  MOVLW  25
0EEA:  MOVWF  4C
0EEB:  BCF    0A.3
0EEC:  CALL   2AF
0EED:  BSF    0A.3
....................                   
....................                   if(x==8){ } 
0EEE:  MOVF   3E,W
0EEF:  SUBLW  08
0EF0:  BTFSS  03.2
0EF1:  GOTO   6F2
....................                   if(x==9){} 
0EF2:  MOVF   3E,W
0EF3:  SUBLW  09
0EF4:  BTFSS  03.2
0EF5:  GOTO   6F6
....................                   if(x==77){  if(h==0)output_high(pin_e0); 
0EF6:  MOVF   3E,W
0EF7:  SUBLW  4D
0EF8:  BTFSS  03.2
0EF9:  GOTO   706
0EFA:  MOVF   2F,F
0EFB:  BTFSS  03.2
0EFC:  GOTO   702
0EFD:  BSF    03.5
0EFE:  BCF    09.0
0EFF:  BCF    03.5
0F00:  BSF    09.0
0F01:  GOTO   706
....................                                       else output_low(pin_e0);} 
0F02:  BSF    03.5
0F03:  BCF    09.0
0F04:  BCF    03.5
0F05:  BCF    09.0
....................                   if(x==0){} 
0F06:  MOVF   3E,F
0F07:  BTFSS  03.2
0F08:  GOTO   709
....................                   if(x==99){    } 
0F09:  MOVF   3E,W
0F0A:  SUBLW  63
0F0B:  BTFSS  03.2
0F0C:  GOTO   70D
0F0D:  GOTO   386
....................                        
....................   } 
.................... } 
....................  
0F0E:  SLEEP
....................  
....................  

Configuration Fuses:
   Word  1: 2F43   RC NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
